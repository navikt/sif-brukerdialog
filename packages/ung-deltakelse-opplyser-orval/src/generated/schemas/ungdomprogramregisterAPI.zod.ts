/** Imported types added by fixNativeEnums */
import { Oppgavetype, OppgaveStatus } from '../endpoints/ungdomprogramregisterAPI';

/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Ungdomprogramregister API
 * API spesifikasjon for Ungdomsprogramregister
 * OpenAPI spec version: v1.0.0
 */
import { z as zod } from 'zod';

/**
 * @deprecated
 * @summary Oppdater opplysninger for en eksisterende deltakelse i ungdomsprogrammet
 */
export const oppdaterFraProgramParams = zod.object({
    deltakelseId: zod.string().uuid(),
});

export const oppdaterFraProgramBody = zod.object({
    id: zod.string().uuid().optional(),
    deltaker: zod.object({
        id: zod.string().uuid().optional(),
        deltakerIdent: zod.string(),
    }),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
});

export const oppdaterFraProgramResponse = zod.object({
    id: zod.string().uuid().optional(),
    deltaker: zod.object({
        id: zod.string().uuid().optional(),
        deltakerIdent: zod.string(),
    }),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
});

/**
 * @summary Endrer startdato p√• en deltakelse i ungdomsprogrammet
 */
export const endreStartdatoParams = zod.object({
    deltakelseId: zod.string().uuid(),
});

export const endreStartdatoBody = zod.object({
    dato: zod.string().date(),
    veilederRef: zod.string(),
    meldingFraVeileder: zod.string().optional(),
});

export const endreStartdatoResponse = zod.object({
    id: zod.string().uuid().optional(),
    deltaker: zod.object({
        id: zod.string().uuid().optional(),
        deltakerIdent: zod.string(),
    }),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
});

/**
 * @summary Endrer startdato p√• en deltakelse i ungdomsprogrammet
 */
export const endreSluttdatoParams = zod.object({
    deltakelseId: zod.string().uuid(),
});

export const endreSluttdatoBody = zod.object({
    dato: zod.string().date(),
    veilederRef: zod.string(),
    meldingFraVeileder: zod.string().optional(),
});

export const endreSluttdatoResponse = zod.object({
    id: zod.string().uuid().optional(),
    deltaker: zod.object({
        id: zod.string().uuid().optional(),
        deltakerIdent: zod.string(),
    }),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
});

/**
 * @summary Avslutter en deltakelse i ungdomsprogrammet
 */
export const meldUtDeltakerParams = zod.object({
    deltakelseId: zod.string().uuid(),
});

export const meldUtDeltakerBody = zod.object({
    utmeldingsdato: zod.string().date(),
});

export const meldUtDeltakerResponse = zod.object({
    id: zod.string().uuid().optional(),
    deltaker: zod.object({
        id: zod.string().uuid().optional(),
        deltakerIdent: zod.string(),
    }),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
});

/**
 * @summary Markerer at deltakelsen er s√∏kt om
 */
export const markerDeltakelseSomS√∏ktParams = zod.object({
    id: zod.string().uuid(),
});

export const markerDeltakelseSomS√∏ktResponse = zod.object({
    id: zod.string().uuid().optional(),
    deltaker: zod.object({
        id: zod.string().uuid().optional(),
        deltakerIdent: zod.string(),
    }),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
});

/**
 * @deprecated
 * @summary Legg til en ny deltakelse i ungdomsprogrammet
 */
export const leggTilIProgramBody = zod.object({
    id: zod.string().uuid().optional(),
    deltaker: zod.object({
        id: zod.string().uuid().optional(),
        deltakerIdent: zod.string(),
    }),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
});

/**
 * @summary Meld inn en deltaker i ungdomsprogrammet.
 */
export const meldInnDeltakerBody = zod.object({
    deltakerIdent: zod.string(),
    startdato: zod.string().date(),
});

export const meldInnDeltakerResponse = zod.object({
    id: zod.string().uuid().optional(),
    deltaker: zod.object({
        id: zod.string().uuid().optional(),
        deltakerIdent: zod.string(),
    }),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
});

/**
 * @summary Hent alle deltakelser for en deltaker i ungdomsprogrammet
 */
export const hentAlleDeltakelserGittDeltakerAkt√∏rBody = zod.object({
    akt√∏rId: zod.string(),
});

export const hentAlleDeltakelserGittDeltakerAkt√∏rResponse = zod.object({
    opplysninger: zod.array(
        zod.object({
            id: zod.string().uuid().optional(),
            deltaker: zod.object({
                id: zod.string().uuid().optional(),
                deltakerIdent: zod.string(),
            }),
            fraOgMed: zod.string().date(),
            tilOgMed: zod.string().date().optional(),
            harS√∏kt: zod.boolean(),
            oppgaver: zod.array(
                zod.object({
                    id: zod.string().uuid(),
                    oppgavetype: zod.nativeEnum(Oppgavetype),
                    oppgavetypeData: zod
                        .object({})
                        .and(
                            zod.object({
                                nySluttdato: zod.string().date().optional(),
                                veilederRef: zod.string().optional(),
                                meldingFraVeileder: zod.string().optional(),
                            }),
                        )
                        .or(
                            zod.object({}).and(
                                zod.object({
                                    nyStartdato: zod.string().date().optional(),
                                    veilederRef: zod.string().optional(),
                                    meldingFraVeileder: zod.string().optional(),
                                }),
                            ),
                        ),
                    status: zod.nativeEnum(OppgaveStatus),
                    opprettetDato: zod.string().datetime(),
                    l√∏stDato: zod.string().datetime().optional(),
                }),
            ),
        }),
    ),
});

/**
 * @summary Hent personlia for en deltaker
 */
export const hentDeltakerInfoGittDeltakerBody = zod.object({
    id: zod.string().uuid().optional(),
    deltakerIdent: zod.string(),
});

export const hentDeltakerInfoGittDeltakerResponse = zod.object({
    id: zod.string().uuid().optional(),
    deltakerIdent: zod.string(),
    navn: zod.object({
        fornavn: zod.string(),
        mellomnavn: zod.string().optional(),
        etternavn: zod.string(),
    }),
    f√∏dselsdato: zod.string().date(),
    f√∏rsteMuligeInnmeldingsdato: zod.string().date(),
    sisteMuligeInnmeldingsdato: zod.string().date(),
});

/**
 * @summary Hent alle deltakelser for en deltaker i ungdomsprogrammet
 */
export const hentAlleDeltakelserGittDeltakerIdParams = zod.object({
    deltakerId: zod.string().uuid(),
});

export const hentAlleDeltakelserGittDeltakerIdResponseItem = zod.object({
    id: zod.string().uuid().optional(),
    deltaker: zod.object({
        id: zod.string().uuid().optional(),
        deltakerIdent: zod.string(),
    }),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
});
export const hentAlleDeltakelserGittDeltakerIdResponse = zod.array(hentAlleDeltakelserGittDeltakerIdResponseItem);

/**
 * @summary Hent personlia for en deltaker gitt en UUID
 */
export const hentDeltakerInfoGittDeltakerIdParams = zod.object({
    id: zod.string().uuid(),
});

export const hentDeltakerInfoGittDeltakerIdResponse = zod.object({
    id: zod.string().uuid().optional(),
    deltakerIdent: zod.string(),
    navn: zod.object({
        fornavn: zod.string(),
        mellomnavn: zod.string().optional(),
        etternavn: zod.string(),
    }),
    f√∏dselsdato: zod.string().date(),
    f√∏rsteMuligeInnmeldingsdato: zod.string().date(),
    sisteMuligeInnmeldingsdato: zod.string().date(),
});

/**
 * @summary Henter alle deltakelser for en deltaker i ungdomsprogrammet
 */
export const hentAlleMineDeltakelserResponseItem = zod.object({
    id: zod.string().uuid(),
    fraOgMed: zod.string().date(),
    tilOgMed: zod.string().date().optional(),
    harS√∏kt: zod.boolean(),
    oppgaver: zod.array(
        zod.object({
            id: zod.string().uuid(),
            oppgavetype: zod.nativeEnum(Oppgavetype),
            oppgavetypeData: zod
                .object({})
                .and(
                    zod.object({
                        nySluttdato: zod.string().date().optional(),
                        veilederRef: zod.string().optional(),
                        meldingFraVeileder: zod.string().optional(),
                    }),
                )
                .or(
                    zod.object({}).and(
                        zod.object({
                            nyStartdato: zod.string().date().optional(),
                            veilederRef: zod.string().optional(),
                            meldingFraVeileder: zod.string().optional(),
                        }),
                    ),
                ),
            status: zod.nativeEnum(OppgaveStatus),
            opprettetDato: zod.string().datetime(),
            l√∏stDato: zod.string().datetime().optional(),
        }),
    ),
    rapporteringsPerioder: zod.array(
        zod.object({
            fraOgMed: zod.string().date(),
            tilOgMed: zod.string().date(),
            harRapportert: zod.boolean(),
            inntekt: zod.number().optional(),
        }),
    ),
});
export const hentAlleMineDeltakelserResponse = zod.array(hentAlleMineDeltakelserResponseItem);

/**
 * @summary Fjern en deltakelse fra ungdomsprogrammet
 */
export const fjernFraProgramParams = zod.object({
    deltakelseId: zod.string().uuid(),
});
