import { NumberDuration, ISODuration, DateDurationMap, Duration, DateRange, ISODate, InputDateDurationMap } from '.';
export declare const getPositiveNumberValue: (value: any) => number | 'invalidNumberValue' | undefined;
export declare const numberDurationAsDuration: (duration: NumberDuration | Partial<Duration>) => Duration;
export declare const durationAsNumberDuration: (duration: Partial<Duration>) => NumberDuration;
export declare const ensureNumberDuration: (duration: Partial<Duration> | Partial<NumberDuration>) => NumberDuration;
export declare const ensureDuration: (duration: Partial<Duration> | NumberDuration) => Duration;
export declare const durationIsZero: (duration: NumberDuration | Partial<Duration>) => boolean;
export declare const durationToISODuration: (duration: NumberDuration | Partial<Duration>) => ISODuration;
export declare const durationsAreEqual: (duration1?: Partial<Duration> | NumberDuration, duration2?: Partial<Duration> | NumberDuration) => boolean;
export declare const summarizeDurations: (durations: Array<Partial<Duration> | NumberDuration | undefined>) => NumberDuration;
export declare const ISODurationToNumberDuration: (duration: string) => NumberDuration | undefined;
export declare const ISODurationToMaybeDuration: (duration: string) => Duration | undefined;
export declare const ISODurationToDuration: (validDuration: string) => Duration;
export declare const ISODurationToDecimalDuration: (isoDuration: string) => number | undefined;
export declare const getPercentageOfDecimalDuration: (decimalDuration: number, percentage: number) => number;
export declare const getPercentageOfISODuration: (isoDuration: ISODuration, percentage: number) => ISODuration | undefined;
export declare const getPercentageOfDuration: (duration: Duration, percentage: number) => Duration;
export declare const decimalDurationToNumberDuration: (duration: number) => NumberDuration;
export declare const decimalDurationToDuration: (duration: number) => Duration;
export declare const decimalDurationToISODuration: (duraction: number) => ISODuration;
export declare const durationToDecimalDuration: (duration: NumberDuration | Partial<Duration>) => number;
export declare const isValidDuration: (duration: NumberDuration | Partial<Duration> | undefined) => duration is NumberDuration;
export declare const getDurationsDiff: (durations1: DateDurationMap, durations2: DateDurationMap) => DateDurationMap;
export declare const getValidDurations: (durationMap: DateDurationMap | InputDateDurationMap) => DateDurationMap;
export declare const summarizeDateDurationMap: (durationMap: DateDurationMap) => NumberDuration;
export declare const getDatesWithDurationLongerThanZero: (duration: DateDurationMap | InputDateDurationMap) => ISODate[];
export declare const getDurationsInDateRange: (dateDurationMap: DateDurationMap, dateRange: DateRange) => DateDurationMap;
export declare const removeDatesFromDateDurationMap: (dateDurationMap: DateDurationMap, datesToRemove: Date[]) => DateDurationMap;
export declare const getDateDurationDiff: (durations1: DateDurationMap, durations2: DateDurationMap) => DateDurationMap;
export declare const durationIsGreatherThanZero: (duration: Duration | undefined) => boolean;
export declare const getNumberDurationOrUndefined: (duration?: Duration) => NumberDuration | undefined;
export declare const getDateRangeFromDateDurationMap: (dateDurationMap: DateDurationMap) => DateRange;
export declare const durationUtils: {
    decimalDurationToDuration: (duration: number) => Duration;
    decimalDurationToNumberDuration: (duration: number) => NumberDuration;
    decimalDurationToISODuration: (duraction: number) => ISODuration;
    durationAsNumberDuration: (duration: Partial<Duration>) => NumberDuration;
    durationIsZero: (duration: NumberDuration | Partial<Duration>) => boolean;
    durationsAreEqual: (duration1?: Partial<Duration> | NumberDuration, duration2?: Partial<Duration> | NumberDuration) => boolean;
    durationToDecimalDuration: (duration: NumberDuration | Partial<Duration>) => number;
    durationToISODuration: (duration: NumberDuration | Partial<Duration>) => ISODuration;
    durationIsGreatherThanZero: (duration: Duration | undefined) => boolean;
    ensureDuration: (duration: Partial<Duration> | NumberDuration) => Duration;
    ensureNumberDuration: (duration: Partial<Duration> | Partial<NumberDuration>) => NumberDuration;
    getDateDurationDiff: (durations1: DateDurationMap, durations2: DateDurationMap) => DateDurationMap;
    getDateRangeFromDateDurationMap: (dateDurationMap: DateDurationMap) => DateRange;
    getDatesWithDurationLongerThanZero: (duration: DateDurationMap | InputDateDurationMap) => ISODate[];
    getDurationsDiff: (durations1: DateDurationMap, durations2: DateDurationMap) => DateDurationMap;
    getDurationsInDateRange: (dateDurationMap: DateDurationMap, dateRange: DateRange) => DateDurationMap;
    getNumberDurationOrUndefined: (duration?: Duration) => NumberDuration | undefined;
    getPercentageOfISODuration: (isoDuration: ISODuration, percentage: number) => ISODuration | undefined;
    getPercentageOfDuration: (duration: Duration, percentage: number) => Duration;
    getPercentageOfDecimalDuration: (decimalDuration: number, percentage: number) => number;
    getValidDurations: (durationMap: DateDurationMap | InputDateDurationMap) => DateDurationMap;
    ISODurationToDuration: (duration: string) => Duration | undefined;
    ISODurationToNumberDuration: (duration: string) => NumberDuration | undefined;
    ISODurationToDecimalDuration: (isoDuration: string) => number | undefined;
    isValidDuration: (duration: NumberDuration | Partial<Duration> | undefined) => duration is NumberDuration;
    numberDurationAsDuration: (duration: NumberDuration | Partial<Duration>) => Duration;
    summarizeDateDurationMap: (durationMap: DateDurationMap) => NumberDuration;
    summarizeDurations: (durations: Array<Partial<Duration> | NumberDuration | undefined>) => NumberDuration;
};
//# sourceMappingURL=durationUtils.d.ts.map