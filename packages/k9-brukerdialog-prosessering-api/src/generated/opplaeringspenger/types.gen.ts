// This file is auto-generated by @hey-api/openapi-ts

export type ProblemDetail = {
    type?: string;
    title?: string;
    status?: number;
    detail?: string;
    instance?: string;
    properties?: {
        [key: string]: unknown;
    };
};

export type ArbeidIPeriode = {
    [key: string]: unknown;
};

export type ArbeidsforholdOlp = {
    jobberNormaltTimer: number;
    arbeidIPeriode: ArbeidIPeriode;
};

export type ArbeidsgiverOlp = {
    [key: string]: unknown;
};

export type BarnDetaljer = {
    norskIdentifikator?: string;
    fødselsdato?: string;
    aktørId?: string;
    navn: string;
    getårsakManglerIdentitetsnummer?: 'NYFØDT' | 'BARNET_BOR_I_UTLANDET' | 'ANNET';
    relasjonTilBarnet?: 'MOR' | 'MEDMOR' | 'FAR' | 'FOSTERFORELDER' | 'ANNET';
    relasjonTilBarnetBeskrivelse?: string;
    fødselsattestVedleggUrls?: string[];
};

export type Bosted = {
    fraOgMed: string;
    tilOgMed: string;
    landkode: string;
    landnavn: string;
};

export type Enkeltdag = {
    dato: string;
    tid: string;
};

export type EttersendingAvVedlegg = {
    skalEttersendeVedlegg: boolean;
    vedleggSomSkalEttersendes?: Array<'LEGEERKLÆRING' | 'KURSINFORMASJON' | 'ANNET'>;
    isValid: boolean;
};

export type Ferieuttak = {
    fraOgMed: string;
    tilOgMed: string;
};

export type FerieuttakIPerioden = {
    skalTaUtFerieIPerioden: boolean;
    ferieuttak: Ferieuttak[];
};

export type FrilansOlp = {
    startdato: string;
    sluttdato?: string;
    jobberFortsattSomFrilans: boolean;
    arbeidsforhold?: ArbeidsforholdOlp;
    harHattInntektSomFrilanser: boolean;
};

export type Kurs = {
    kursholder: Kursholder;
    kursperioder: string[];
    reise: Reise;
};

export type Kursholder = {
    uuid?: string;
    navn: string;
};

export type Land = {
    landkode: string;
    landnavn: string;
};

export type Medlemskap = {
    harBoddIUtlandetSiste12Mnd?: boolean;
    utenlandsoppholdSiste12Mnd: Bosted[];
    skalBoIUtlandetNeste12Mnd?: boolean;
    utenlandsoppholdNeste12Mnd: Bosted[];
};

export type OpplæringspengerSøknad = {
    newVersion?: boolean;
    apiDataVersjon?: string;
    språk: 'nb' | 'nn';
    søkerNorskIdent?: string;
    barn: BarnDetaljer;
    arbeidsgivere: ArbeidsgiverOlp[];
    vedlegg: string[];
    fraOgMed: string;
    tilOgMed: string;
    medlemskap: Medlemskap;
    utenlandsoppholdIPerioden?: UtenlandsoppholdIPerioden;
    ferieuttakIPerioden?: FerieuttakIPerioden;
    opptjeningIUtlandet: OpptjeningIUtlandet[];
    utenlandskNæring: UtenlandskNæring[];
    harBekreftetOpplysninger: boolean;
    harForståttRettigheterOgPlikter: boolean;
    frilans?: FrilansOlp;
    selvstendigNæringsdrivende?: SelvstendigNæringsdrivendeOlp;
    stønadGodtgjørelse?: StønadGodtgjørelse;
    harVærtEllerErVernepliktig?: boolean;
    dataBruktTilUtledningAnnetData?: string;
    ettersendingAvVedlegg?: EttersendingAvVedlegg;
    kurs: Kurs;
};

export type OpptjeningIUtlandet = {
    navn: string;
    opptjeningType: 'ARBEIDSTAKER' | 'FRILANSER';
    land: Land;
    fraOgMed: string;
    tilOgMed: string;
};

export type Regnskapsfører = {
    navn?: string;
    telefon?: string;
};

export type Reise = {
    reiserUtenforKursdager: boolean;
    reisedager?: string[];
    reisedagerBeskrivelse?: string;
};

export type SelvstendigNæringsdrivendeOlp = {
    virksomhet: Virksomhet;
    arbeidsforhold: ArbeidsforholdOlp;
};

export type StønadGodtgjørelse = {
    mottarStønadGodtgjørelse?: boolean;
    startdato?: string;
    sluttdato?: string;
};

export type UtenlandskNæring = {
    næringstype: 'FISKE' | 'JORDBRUK_SKOGBRUK' | 'DAGMAMMA' | 'ANNEN';
    navnPåVirksomheten: string;
    land: Land;
    organisasjonsnummer?: string;
    fraOgMed: string;
    tilOgMed?: string;
};

export type Utenlandsopphold = {
    fraOgMed: string;
    tilOgMed: string;
    landkode: string;
    landnavn: string;
    isValid: boolean;
};

export type UtenlandsoppholdIPerioden = {
    skalOppholdeSegIUtlandetIPerioden: boolean;
    opphold: Utenlandsopphold[];
};

export type VarigEndring = {
    dato?: string;
    inntektEtterEndring?: number;
    forklaring?: string;
};

export type Virksomhet = {
    fraOgMed: string;
    tilOgMed?: string;
    næringstype: 'FISKE' | 'JORDBRUK_SKOGBRUK' | 'DAGMAMMA' | 'ANNEN';
    fiskerErPåBladB?: boolean;
    næringsinntekt?: number;
    navnPåVirksomheten: string;
    organisasjonsnummer?: string;
    registrertINorge: boolean;
    registrertIUtlandet?: Land;
    regnskapsfører?: Regnskapsfører;
    erNyoppstartet: boolean;
    harFlereAktiveVirksomheter: boolean;
};

export type YrkesaktivSisteTreFerdigliknedeArene = {
    oppstartsdato?: string;
};

export type Søker = {
    aktørId: string;
    fødselsdato: string;
    fødselsnummer: string;
    fornavn?: string;
    mellomnavn?: string;
    etternavn?: string;
};

export type BarnOppslag = {
    fødselsdato: string;
    fornavn: string;
    mellomnavn?: string;
    etternavn: string;
    aktørId: string;
};

export type BarnOppslagListe = {
    barn: BarnOppslag[];
};

export type ArbeidsgivereDto = {
    organisasjoner: OrganisasjonDto[];
    privateArbeidsgivere?: PrivatArbeidsgiverDto[];
    frilansoppdrag?: FrilansoppdragDto[];
};

export type FrilansoppdragDto = {
    type: string;
    organisasjonsnummer?: string;
    navn?: string;
    offentligIdent?: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type OrganisasjonDto = {
    organisasjonsnummer: string;
    navn?: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type PrivatArbeidsgiverDto = {
    offentligIdent: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type ArbeidIPeriodeWritable = {
    jobberIPerioden?: 'SOM_VANLIG' | 'REDUSERT' | 'HELT_FRAVÆR';
    enkeltdager?: Enkeltdag[];
};

export type ArbeidsgiverOlpWritable = {
    organisasjonsnummer?: string;
    navn?: string;
    erAnsatt?: boolean;
    arbeidsforhold?: ArbeidsforholdOlp;
};

export type VirksomhetWritable = {
    fraOgMed: string;
    tilOgMed?: string;
    næringstype: 'FISKE' | 'JORDBRUK_SKOGBRUK' | 'DAGMAMMA' | 'ANNEN';
    fiskerErPåBladB?: boolean;
    næringsinntekt?: number;
    navnPåVirksomheten: string;
    organisasjonsnummer?: string;
    registrertINorge: boolean;
    registrertIUtlandet?: Land;
    yrkesaktivSisteTreFerdigliknedeÅrene?: YrkesaktivSisteTreFerdigliknedeArene;
    varigEndring?: VarigEndring;
    regnskapsfører?: Regnskapsfører;
    erNyoppstartet: boolean;
    harFlereAktiveVirksomheter: boolean;
};

export type DeleteMellomlagringData = {
    body?: never;
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type DeleteMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type DeleteMellomlagringError = DeleteMellomlagringErrors[keyof DeleteMellomlagringErrors];

export type DeleteMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetMellomlagringData = {
    body?: never;
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type GetMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type GetMellomlagringError = GetMellomlagringErrors[keyof GetMellomlagringErrors];

export type GetMellomlagringResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetMellomlagringResponse = GetMellomlagringResponses[keyof GetMellomlagringResponses];

export type CreateMellomlagringData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type CreateMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type CreateMellomlagringError = CreateMellomlagringErrors[keyof CreateMellomlagringErrors];

export type CreateMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateMellomlagringData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type UpdateMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type UpdateMellomlagringError = UpdateMellomlagringErrors[keyof UpdateMellomlagringErrors];

export type UpdateMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type LagreVedleggData = {
    body?: {
        vedlegg: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/vedlegg';
};

export type LagreVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type LagreVedleggError = LagreVedleggErrors[keyof LagreVedleggErrors];

export type LagreVedleggResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type InnsendingOpplæringspengerSøknadData = {
    body: OpplæringspengerSøknad;
    headers: {
        'X-Brukerdialog-Git-Sha': string;
    };
    path?: never;
    query?: never;
    url: '/opplaringspenger/innsending';
};

export type InnsendingOpplæringspengerSøknadErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type InnsendingOpplæringspengerSøknadError =
    InnsendingOpplæringspengerSøknadErrors[keyof InnsendingOpplæringspengerSøknadErrors];

export type InnsendingOpplæringspengerSøknadResponses = {
    /**
     * Accepted
     */
    202: unknown;
};

export type SlettVedleggData = {
    body?: never;
    path: {
        vedleggId: string;
    };
    query?: never;
    url: '/vedlegg/{vedleggId}';
};

export type SlettVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type SlettVedleggError = SlettVedleggErrors[keyof SlettVedleggErrors];

export type SlettVedleggResponses = {
    /**
     * No Content
     */
    204: void;
};

export type SlettVedleggResponse = SlettVedleggResponses[keyof SlettVedleggResponses];

export type HentVedleggData = {
    body?: never;
    path: {
        vedleggId: string;
    };
    query?: never;
    url: '/vedlegg/{vedleggId}';
};

export type HentVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentVedleggError = HentVedleggErrors[keyof HentVedleggErrors];

export type HentVedleggResponses = {
    /**
     * OK
     */
    200: string;
};

export type HentVedleggResponse = HentVedleggResponses[keyof HentVedleggResponses];

export type HentSøkerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oppslag/soker';
};

export type HentSøkerErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentSøkerError = HentSøkerErrors[keyof HentSøkerErrors];

export type HentSøkerResponses = {
    /**
     * OK
     */
    200: Søker;
};

export type HentSøkerResponse = HentSøkerResponses[keyof HentSøkerResponses];

export type HentBarnData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oppslag/barn';
};

export type HentBarnErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentBarnError = HentBarnErrors[keyof HentBarnErrors];

export type HentBarnResponses = {
    /**
     * OK
     */
    200: BarnOppslagListe;
};

export type HentBarnResponse = HentBarnResponses[keyof HentBarnResponses];

export type HentArbeidsgivereData = {
    body?: never;
    path?: never;
    query: {
        fra_og_med: string;
        til_og_med: string;
        inkluderAlleAnsettelsesperioder?: boolean;
        frilansoppdrag?: boolean;
        private_arbeidsgivere?: boolean;
    };
    url: '/oppslag/arbeidsgiver';
};

export type HentArbeidsgivereErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentArbeidsgivereError = HentArbeidsgivereErrors[keyof HentArbeidsgivereErrors];

export type HentArbeidsgivereResponses = {
    /**
     * OK
     */
    200: ArbeidsgivereDto;
};

export type HentArbeidsgivereResponse = HentArbeidsgivereResponses[keyof HentArbeidsgivereResponses];

export type ClientOptions = {
    baseURL: 'https://k9-brukerdialog-prosessering.intern.dev.nav.no' | (string & {});
};
