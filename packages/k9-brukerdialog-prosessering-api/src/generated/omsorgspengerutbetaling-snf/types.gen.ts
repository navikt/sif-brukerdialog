// This file is auto-generated by @hey-api/openapi-ts

export type ProblemDetail = {
    type?: string;
    title?: string;
    status?: number;
    detail?: string;
    instance?: string;
    properties?: {
        [key: string]: unknown;
    };
};

export type Barn = {
    identitetsnummer?: string;
    navn?: string;
    fødselsdato?: string;
    type?: 'FOSTERBARN' | 'ANNET' | 'FRA_OPPSLAG';
    aktørId?: string;
};

export type Bekreftelser = {
    harBekreftetOpplysninger: boolean;
    harForståttRettigheterOgPlikter: boolean;
};

export type Bosted = {
    fraOgMed?: string;
    tilOgMed?: string;
    landkode?: string;
    landnavn?: string;
    erEØSLand?: boolean;
};

export type Frilans = {
    startdato?: string;
    sluttdato?: string;
    jobberFortsattSomFrilans?: boolean;
};

export type Land = {
    landkode: string;
    landnavn: string;
};

export type OmsorgspengerutbetalingSnfSøknad = {
    språk: string;
    søkerNorskIdent?: string;
    bosteder: Array<unknown>;
    opphold: Array<unknown>;
    spørsmål: Array<SpørsmålOgSvar>;
    harDekketTiFørsteDagerSelv?: boolean;
    harSyktBarn?: boolean;
    harAleneomsorg?: boolean;
    bekreftelser: Bekreftelser;
    utbetalingsperioder: Array<unknown>;
    barn: Array<unknown>;
    selvstendigNæringsdrivende?: Virksomhet;
    erArbeidstakerOgså: boolean;
    vedlegg: Array<string>;
    dataBruktTilUtledningAnnetData?: string;
};

export type Regnskapsfører = {
    navn?: string;
    telefon?: string;
};

export type SpørsmålOgSvar = {
    spørsmål: string;
    svar: boolean;
};

export type Utbetalingsperiode = {
    fraOgMed?: string;
    tilOgMed?: string;
    antallTimerBorte?: string;
    antallTimerPlanlagt?: string;
    årsak?: 'STENGT_SKOLE_ELLER_BARNEHAGE' | 'SMITTEVERNHENSYN' | 'ORDINÆRT_FRAVÆR';
    aktivitetFravær?: Array<'ARBEIDSTAKER' | 'FRILANSER' | 'SELVSTENDIG_VIRKSOMHET'>;
};

export type VarigEndring = {
    dato?: string;
    inntektEtterEndring?: number;
    forklaring?: string;
};

export type Virksomhet = {
    fraOgMed: string;
    tilOgMed?: string;
    næringstype: 'FISKE' | 'JORDBRUK_SKOGBRUK' | 'DAGMAMMA' | 'ANNEN';
    fiskerErPåBladB?: boolean;
    næringsinntekt?: number;
    navnPåVirksomheten: string;
    organisasjonsnummer?: string;
    registrertINorge: boolean;
    registrertIUtlandet?: Land;
    regnskapsfører?: Regnskapsfører;
    erNyoppstartet: boolean;
    harFlereAktiveVirksomheter: boolean;
};

export type YrkesaktivSisteTreFerdigliknedeArene = {
    oppstartsdato?: string;
};

export type Søker = {
    aktørId: string;
    fødselsdato: string;
    fødselsnummer: string;
    fornavn?: string;
    mellomnavn?: string;
    etternavn?: string;
};

export type BarnOppslag = {
    fødselsdato: string;
    fornavn: string;
    mellomnavn?: string;
    etternavn: string;
    aktørId: string;
};

export type BarnOppslagListe = {
    barn: Array<BarnOppslag>;
};

export type ArbeidsgivereDto = {
    organisasjoner: Array<OrganisasjonDto>;
    privateArbeidsgivere?: Array<PrivatArbeidsgiverDto>;
    frilansoppdrag?: Array<FrilansoppdragDto>;
};

export type FrilansoppdragDto = {
    type: string;
    organisasjonsnummer?: string;
    navn?: string;
    offentligIdent?: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type OrganisasjonDto = {
    organisasjonsnummer: string;
    navn?: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type PrivatArbeidsgiverDto = {
    offentligIdent: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type OmsorgspengerutbetalingSnfSøknadWritable = {
    språk: string;
    søkerNorskIdent?: string;
    bosteder: Array<Bosted>;
    opphold: Array<Bosted>;
    spørsmål: Array<SpørsmålOgSvar>;
    harDekketTiFørsteDagerSelv?: boolean;
    harSyktBarn?: boolean;
    harAleneomsorg?: boolean;
    bekreftelser: Bekreftelser;
    utbetalingsperioder: Array<Utbetalingsperiode>;
    barn: Array<Barn>;
    frilans?: Frilans;
    selvstendigNæringsdrivende?: VirksomhetWritable;
    erArbeidstakerOgså: boolean;
    vedlegg: Array<string>;
    dataBruktTilUtledningAnnetData?: string;
};

export type VirksomhetWritable = {
    fraOgMed: string;
    tilOgMed?: string;
    næringstype: 'FISKE' | 'JORDBRUK_SKOGBRUK' | 'DAGMAMMA' | 'ANNEN';
    fiskerErPåBladB?: boolean;
    næringsinntekt?: number;
    navnPåVirksomheten: string;
    organisasjonsnummer?: string;
    registrertINorge: boolean;
    registrertIUtlandet?: Land;
    yrkesaktivSisteTreFerdigliknedeÅrene?: YrkesaktivSisteTreFerdigliknedeArene;
    varigEndring?: VarigEndring;
    regnskapsfører?: Regnskapsfører;
    erNyoppstartet: boolean;
    harFlereAktiveVirksomheter: boolean;
};

export type DeleteMellomlagringData = {
    body?: never;
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type DeleteMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type DeleteMellomlagringError = DeleteMellomlagringErrors[keyof DeleteMellomlagringErrors];

export type DeleteMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetMellomlagringData = {
    body?: never;
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type GetMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type GetMellomlagringError = GetMellomlagringErrors[keyof GetMellomlagringErrors];

export type GetMellomlagringResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetMellomlagringResponse = GetMellomlagringResponses[keyof GetMellomlagringResponses];

export type CreateMellomlagringData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type CreateMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type CreateMellomlagringError = CreateMellomlagringErrors[keyof CreateMellomlagringErrors];

export type CreateMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateMellomlagringData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type UpdateMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type UpdateMellomlagringError = UpdateMellomlagringErrors[keyof UpdateMellomlagringErrors];

export type UpdateMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type LagreVedleggData = {
    body?: {
        vedlegg: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/vedlegg';
};

export type LagreVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type LagreVedleggError = LagreVedleggErrors[keyof LagreVedleggErrors];

export type LagreVedleggResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type InnsendingOmsorgspengerutbetalingSnfSøknadData = {
    body: OmsorgspengerutbetalingSnfSøknad;
    headers: {
        'X-Brukerdialog-Git-Sha': string;
    };
    path?: never;
    query?: never;
    url: '/omsorgspenger-utbetaling-snf/innsending';
};

export type InnsendingOmsorgspengerutbetalingSnfSøknadErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type InnsendingOmsorgspengerutbetalingSnfSøknadError =
    InnsendingOmsorgspengerutbetalingSnfSøknadErrors[keyof InnsendingOmsorgspengerutbetalingSnfSøknadErrors];

export type InnsendingOmsorgspengerutbetalingSnfSøknadResponses = {
    /**
     * Accepted
     */
    202: unknown;
};

export type SlettVedleggData = {
    body?: never;
    path: {
        vedleggId: string;
    };
    query?: never;
    url: '/vedlegg/{vedleggId}';
};

export type SlettVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type SlettVedleggError = SlettVedleggErrors[keyof SlettVedleggErrors];

export type SlettVedleggResponses = {
    /**
     * No Content
     */
    204: void;
};

export type SlettVedleggResponse = SlettVedleggResponses[keyof SlettVedleggResponses];

export type HentVedleggData = {
    body?: never;
    path: {
        vedleggId: string;
    };
    query?: never;
    url: '/vedlegg/{vedleggId}';
};

export type HentVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentVedleggError = HentVedleggErrors[keyof HentVedleggErrors];

export type HentVedleggResponses = {
    /**
     * OK
     */
    200: string;
};

export type HentVedleggResponse = HentVedleggResponses[keyof HentVedleggResponses];

export type HentSøkerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oppslag/soker';
};

export type HentSøkerErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentSøkerError = HentSøkerErrors[keyof HentSøkerErrors];

export type HentSøkerResponses = {
    /**
     * OK
     */
    200: Søker;
};

export type HentSøkerResponse = HentSøkerResponses[keyof HentSøkerResponses];

export type HentBarnData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oppslag/barn';
};

export type HentBarnErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentBarnError = HentBarnErrors[keyof HentBarnErrors];

export type HentBarnResponses = {
    /**
     * OK
     */
    200: BarnOppslagListe;
};

export type HentBarnResponse = HentBarnResponses[keyof HentBarnResponses];

export type HentArbeidsgivereData = {
    body?: never;
    path?: never;
    query: {
        fra_og_med: string;
        til_og_med: string;
        inkluderAlleAnsettelsesperioder?: boolean;
        frilansoppdrag?: boolean;
        private_arbeidsgivere?: boolean;
    };
    url: '/oppslag/arbeidsgiver';
};

export type HentArbeidsgivereErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentArbeidsgivereError = HentArbeidsgivereErrors[keyof HentArbeidsgivereErrors];

export type HentArbeidsgivereResponses = {
    /**
     * OK
     */
    200: ArbeidsgivereDto;
};

export type HentArbeidsgivereResponse = HentArbeidsgivereResponses[keyof HentArbeidsgivereResponses];

export type ClientOptions = {
    baseURL: 'https://k9-brukerdialog-prosessering.intern.dev.nav.no' | (string & {});
};
