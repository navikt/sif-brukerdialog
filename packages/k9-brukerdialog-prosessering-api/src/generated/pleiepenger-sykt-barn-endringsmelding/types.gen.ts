// This file is auto-generated by @hey-api/openapi-ts

export type ProblemDetail = {
    type?: string;
    title?: string;
    status?: number;
    detail?: string;
    instance?: string;
    properties?: {
        [key: string]: unknown;
    };
};

export type AnnenAktivitet = {
    periode: string;
    annenAktivitetType: 'MILITÆR_ELLER_SIVILTJENESTE' | '-';
};

export type Arbeidstaker = {
    norskIdentitetsnummer?: string;
    organisasjonsnummer?: string;
    organisasjonsnavn?: string;
    arbeidstidInfo: ArbeidstidInfo;
};

export type Arbeidstid = {
    arbeidstakerList: Array<Arbeidstaker>;
    frilanserArbeidstidInfo?: ArbeidstidInfo;
    selvstendigNæringsdrivendeArbeidstidInfo?: ArbeidstidInfo;
};

export type ArbeidstidInfo = {
    perioder: {
        [key: string]: ArbeidstidPeriodeInfo;
    };
};

export type ArbeidstidPeriodeInfo = {
    jobberNormaltTimerPerDag: string;
    faktiskArbeidTimerPerDag: string;
};

export type Barn = {
    norskIdentitetsnummer: string;
    fødselsdato?: string;
};

export type Beredskap = {
    perioder: {
        [key: string]: BeredskapPeriodeInfo;
    };
    perioderSomSkalSlettes?: {
        [key: string]: BeredskapPeriodeInfo;
    };
};

export type BeredskapPeriodeInfo = {
    tilleggsinformasjon: string;
};

export type BostedPeriodeInfo = {
    land: string;
};

export type Bosteder = {
    perioder?: {
        [key: string]: BostedPeriodeInfo;
    };
    perioderSomSkalSlettes?: {
        [key: string]: BostedPeriodeInfo;
    };
};

export type DataBruktTilUtledning = {
    harForståttRettigheterOgPlikter: boolean;
    harBekreftetOpplysninger: boolean;
    soknadDialogCommitSha?: string;
    annetData?: string;
};

export type Endringsmelding = {
    språk: string;
    pleietrengendeNavn?: string;
    gyldigeEndringsPerioder?: Array<string>;
    søkerNorskIdent?: string;
    harBekreftetOpplysninger: boolean;
    harForståttRettigheterOgPlikter: boolean;
    ytelse: PleiepengerSyktBarn;
};

export type Frilanser = {
    startdato: string;
    sluttdato?: string;
};

export type InfoFraPunsj = {
    søknadenInneholderInfomasjonSomIkkeKanPunsjes?: boolean;
    inneholderMedisinskeOpplysninger?: boolean;
};

export type LovbestemtFerie = {
    perioder: {
        [key: string]: LovbestemtFeriePeriodeInfo;
    };
};

export type LovbestemtFeriePeriodeInfo = {
    skalHaFerie?: boolean;
};

export type Nattevåk = {
    perioder: {
        [key: string]: NattevåkPeriodeInfo;
    };
    perioderSomSkalSlettes: {
        [key: string]: NattevåkPeriodeInfo;
    };
};

export type NattevåkPeriodeInfo = {
    tilleggsinformasjon: string;
};

export type Omsorg = {
    relasjonTilBarnet?: 'MOR' | 'MEDMOR' | 'FAR' | 'FOSTERFORELDER' | 'ANNET';
    beskrivelseAvOmsorgsrollen?: string;
};

export type OpptjeningAktivitet = {
    selvstendigNæringsdrivende: Array<SelvstendigNæringsdrivende>;
    frilanser?: Frilanser;
    utenlandskeArbeidsforhold: Array<UtenlandskArbeidsforhold>;
    andreAktiviteter: Array<AnnenAktivitet>;
};

export type PleiepengerSyktBarn = {
    barn: Barn;
    søknadsperiode: Array<string>;
    /**
     * @deprecated
     */
    endringsperiode: Array<string>;
    trekkKravPerioder: Array<string>;
    opptjeningAktivitet?: OpptjeningAktivitet;
    dataBruktTilUtledning?: DataBruktTilUtledning;
    annetDataBruktTilUtledning?: DataBruktTilUtledning;
    /**
     * @deprecated
     */
    infoFraPunsj?: InfoFraPunsj;
    bosteder: Bosteder;
    utenlandsopphold: Utenlandsopphold;
    beredskap: Beredskap;
    nattevåk: Nattevåk;
    tilsynsordning: Tilsynsordning;
    lovbestemtFerie: LovbestemtFerie;
    arbeidstid: Arbeidstid;
    uttak: Uttak;
    omsorg: Omsorg;
    erSammenMedBarnet?: boolean;
};

export type SelvstendigNæringsdrivende = {
    perioder: {
        [key: string]: SelvstendigNæringsdrivendePeriodeInfo;
    };
    organisasjonsnummer?: string;
    virksomhetNavn?: string;
};

export type SelvstendigNæringsdrivendePeriodeInfo = {
    virksomhetstyper: Array<'DAGMAMMA' | 'FISKE' | 'JORDBRUK_SKOGBRUK' | 'ANNEN' | '-'>;
    regnskapsførerNavn?: string;
    regnskapsførerTlf?: string;
    erVarigEndring?: boolean;
    erNyIArbeidslivet?: boolean;
    endringDato?: string;
    endringBegrunnelse?: string;
    bruttoInntekt?: number;
    erNyoppstartet?: boolean;
    registrertIUtlandet?: boolean;
    landkode?: string;
    erFiskerPåBladB?: boolean;
};

export type TilsynPeriodeInfo = {
    etablertTilsynTimerPerDag: string;
};

export type Tilsynsordning = {
    perioder: {
        [key: string]: TilsynPeriodeInfo;
    };
};

export type UtenlandskArbeidsforhold = {
    ansettelsePeriode: string;
    land: string;
    arbeidsgiversnavn: string;
};

export type Utenlandsopphold = {
    perioder?: {
        [key: string]: UtenlandsoppholdPeriodeInfo;
    };
    perioderSomSkalSlettes?: {
        [key: string]: UtenlandsoppholdPeriodeInfo;
    };
};

export type UtenlandsoppholdPeriodeInfo = {
    land: string;
    årsak?: 'barnetInnlagtIHelseinstitusjonForNorskOffentligRegning' | 'barnetInnlagtIHelseinstitusjonDekketEtterAvtaleMedEtAnnetLandOmTrygd';
    erSammenMedBarnet?: boolean;
};

export type Uttak = {
    perioder: {
        [key: string]: UttakPeriodeInfo;
    };
};

export type UttakPeriodeInfo = {
    timerPleieAvBarnetPerDag: string;
};

export type Søker = {
    aktørId: string;
    fødselsdato: string;
    fødselsnummer: string;
    fornavn?: string;
    mellomnavn?: string;
    etternavn?: string;
};

export type BarnOppslag = {
    fødselsdato: string;
    fornavn: string;
    mellomnavn?: string;
    etternavn: string;
    aktørId: string;
};

export type BarnOppslagListe = {
    barn: Array<BarnOppslag>;
};

export type ArbeidsgivereDto = {
    organisasjoner: Array<OrganisasjonDto>;
    privateArbeidsgivere?: Array<PrivatArbeidsgiverDto>;
    frilansoppdrag?: Array<FrilansoppdragDto>;
};

export type FrilansoppdragDto = {
    type: string;
    organisasjonsnummer?: string;
    navn?: string;
    offentligIdent?: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type OrganisasjonDto = {
    organisasjonsnummer: string;
    navn?: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type PrivatArbeidsgiverDto = {
    offentligIdent: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type DeleteMellomlagringData = {
    body?: never;
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type DeleteMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type DeleteMellomlagringError = DeleteMellomlagringErrors[keyof DeleteMellomlagringErrors];

export type DeleteMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetMellomlagringData = {
    body?: never;
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type GetMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type GetMellomlagringError = GetMellomlagringErrors[keyof GetMellomlagringErrors];

export type GetMellomlagringResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetMellomlagringResponse = GetMellomlagringResponses[keyof GetMellomlagringResponses];

export type CreateMellomlagringData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type CreateMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type CreateMellomlagringError = CreateMellomlagringErrors[keyof CreateMellomlagringErrors];

export type CreateMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateMellomlagringData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type UpdateMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type UpdateMellomlagringError = UpdateMellomlagringErrors[keyof UpdateMellomlagringErrors];

export type UpdateMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type LagreVedleggData = {
    body?: {
        vedlegg: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/vedlegg';
};

export type LagreVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type LagreVedleggError = LagreVedleggErrors[keyof LagreVedleggErrors];

export type LagreVedleggResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type InnsendingEndringsmeldingData = {
    body: Endringsmelding;
    headers: {
        'X-Brukerdialog-Git-Sha': string;
    };
    path?: never;
    query?: never;
    url: '/pleiepenger-sykt-barn/endringsmelding/innsending';
};

export type InnsendingEndringsmeldingErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type InnsendingEndringsmeldingError = InnsendingEndringsmeldingErrors[keyof InnsendingEndringsmeldingErrors];

export type InnsendingEndringsmeldingResponses = {
    /**
     * Accepted
     */
    202: unknown;
};

export type SlettVedleggData = {
    body?: never;
    path: {
        vedleggId: string;
    };
    query?: never;
    url: '/vedlegg/{vedleggId}';
};

export type SlettVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type SlettVedleggError = SlettVedleggErrors[keyof SlettVedleggErrors];

export type SlettVedleggResponses = {
    /**
     * No Content
     */
    204: void;
};

export type SlettVedleggResponse = SlettVedleggResponses[keyof SlettVedleggResponses];

export type HentVedleggData = {
    body?: never;
    path: {
        vedleggId: string;
    };
    query?: never;
    url: '/vedlegg/{vedleggId}';
};

export type HentVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentVedleggError = HentVedleggErrors[keyof HentVedleggErrors];

export type HentVedleggResponses = {
    /**
     * OK
     */
    200: string;
};

export type HentVedleggResponse = HentVedleggResponses[keyof HentVedleggResponses];

export type HentSøkerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oppslag/soker';
};

export type HentSøkerErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentSøkerError = HentSøkerErrors[keyof HentSøkerErrors];

export type HentSøkerResponses = {
    /**
     * OK
     */
    200: Søker;
};

export type HentSøkerResponse = HentSøkerResponses[keyof HentSøkerResponses];

export type HentBarnData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oppslag/barn';
};

export type HentBarnErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentBarnError = HentBarnErrors[keyof HentBarnErrors];

export type HentBarnResponses = {
    /**
     * OK
     */
    200: BarnOppslagListe;
};

export type HentBarnResponse = HentBarnResponses[keyof HentBarnResponses];

export type HentArbeidsgivereData = {
    body?: never;
    path?: never;
    query: {
        fra_og_med: string;
        til_og_med: string;
        inkluderAlleAnsettelsesperioder?: boolean;
        frilansoppdrag?: boolean;
        private_arbeidsgivere?: boolean;
    };
    url: '/oppslag/arbeidsgiver';
};

export type HentArbeidsgivereErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentArbeidsgivereError = HentArbeidsgivereErrors[keyof HentArbeidsgivereErrors];

export type HentArbeidsgivereResponses = {
    /**
     * OK
     */
    200: ArbeidsgivereDto;
};

export type HentArbeidsgivereResponse = HentArbeidsgivereResponses[keyof HentArbeidsgivereResponses];

export type ClientOptions = {
    baseURL: 'https://k9-brukerdialog-prosessering.intern.dev.nav.no' | (string & {});
};