// This file is auto-generated by @hey-api/openapi-ts

export type ProblemDetail = {
    type?: string;
    title?: string;
    status?: number;
    detail?: string;
    instance?: string;
    properties?: {
        [key: string]: unknown;
    };
};

export type ArbeidIPeriode = {
    type: 'ARBEIDER_VANLIG' | 'ARBEIDER_REDUSERT' | 'ARBEIDER_IKKE' | 'IKKE_BESVART';
    redusertArbeid?: ArbeidsRedusert;
};

export type ArbeidsRedusert = {
    type: 'PROSENT_AV_NORMALT' | 'TIMER_I_SNITT_PER_UKE' | 'ULIKE_UKER_TIMER';
    prosentAvNormalt?: number;
    timerPerUke?: string;
    arbeidsuker?: ArbeidsUke[];
};

export type ArbeidsUke = {
    periode: Periode;
    timer: string;
};

export type Arbeidsforhold = {
    normalarbeidstid: NormalArbeidstid;
    arbeidIPeriode: ArbeidIPeriode;
};

export type Arbeidsgiver = {
    organisasjonsnummer: string;
    navn: string;
    erAnsatt: boolean;
    sluttetFørSøknadsperiode?: boolean;
    arbeidsforhold?: Arbeidsforhold;
};

export type BarnDetaljer = {
    fødselsnummer?: string;
    fødselsdato?: string;
    aktørId?: string;
    navn: string;
    getårsakManglerIdentitetsnummer?: 'NYFØDT' | 'BARNET_BOR_I_UTLANDET' | 'ANNET';
};

export type Beredskap = {
    beredskap: boolean;
    tilleggsinformasjon?: string;
};

export type Bosted = {
    fraOgMed: string;
    tilOgMed: string;
    landkode: string;
    landnavn: string;
};

export type Enkeltdag = {
    dato: string;
    tid: string;
};

export type Ferieuttak = {
    fraOgMed: string;
    tilOgMed: string;
};

export type FerieuttakIPerioden = {
    skalTaUtFerieIPerioden: boolean;
    ferieuttak: Ferieuttak[];
};

export type Fosterhjemgodtgjørelse = {
    type: 'MOTTAR_IKKE' | 'MOTTAR_FRIKJØPT' | 'MOTTAR_I_DELER_AV_PERIODEN' | 'MOTTAR_I_HELE_PERIODEN';
    mottarFosterhjemsgodtgjørelse: boolean;
};

export type FosterhjemsgodtgjørelseFrikjøpt = Fosterhjemgodtgjørelse & {
    type: 'FosterhjemsgodtgjørelseFrikjøpt';
} & {
    erFrikjøptFraJobb: boolean;
    frikjøptBeskrivelse: string;
};

export type FosterhjemsgodtgjørelseIkkeFrikjøpt = Fosterhjemgodtgjørelse & {
    type: 'FosterhjemsgodtgjørelseIkkeFrikjøpt';
} & {
    erFrikjøptFraJobb: boolean;
    startdato?: string;
    sluttdato?: string;
};

export type FosterhjemsgodtgjørelseMottarIkke = Fosterhjemgodtgjørelse & {
    type: 'FosterhjemsgodtgjørelseMottarIkke';
};

export type Frilans = {
    harInntektSomFrilanser: boolean;
    startetFørSisteTreHeleMåneder?: boolean;
    startdato?: string;
    sluttdato?: string;
    misterHonorar?: boolean;
    type?: 'FRILANS' | 'FRILANS_HONORAR' | 'HONORAR';
    jobberFortsattSomFrilans?: boolean;
    arbeidsforhold?: Arbeidsforhold;
};

export type Land = {
    landkode: string;
    landnavn: string;
};

export type Medlemskap = {
    harBoddIUtlandetSiste12Mnd?: boolean;
    utenlandsoppholdSiste12Mnd: Bosted[];
    skalBoIUtlandetNeste12Mnd?: boolean;
    utenlandsoppholdNeste12Mnd: Bosted[];
};

export type Nattevåk = {
    harNattevåk: boolean;
    tilleggsinformasjon?: string;
};

export type NormalArbeidstid = {
    timerPerUkeISnitt: string;
};

export type Omsorgsstønad = {
    type: 'MOTTAR_IKKE' | 'MOTTAR_I_DELER_AV_PERIODEN' | 'MOTTAR_I_HELE_PERIODEN';
    mottarOmsorgsstønad: boolean;
};

export type OmsorgsstønadMottarDelerAvPerioden = Omsorgsstønad & {
    type: 'OmsorgsstønadMottarDelerAvPerioden';
} & {
    startdato?: string;
    sluttdato?: string;
    antallTimerIUken: string;
};

export type OmsorgsstønadMottarHelePerioden = Omsorgsstønad & {
    type: 'OmsorgsstønadMottarHelePerioden';
} & {
    antallTimerIUken: string;
};

export type OmsorgsstønadMottarIkke = Omsorgsstønad & {
    type: 'OmsorgsstønadMottarIkke';
};

export type Omsorgstilbud = {
    svarFortid?: 'JA' | 'NEI';
    svarFremtid?: 'JA' | 'NEI' | 'USIKKER';
    erLiktHverUke?: boolean;
    enkeltdager?: Enkeltdag[];
    ukedager?: PlanUkedager;
};

export type OpptjeningIUtlandet = {
    navn: string;
    opptjeningType: 'ARBEIDSTAKER' | 'FRILANSER';
    land: Land;
    fraOgMed: string;
    tilOgMed: string;
};

export type Periode = {
    fraOgMed: string;
    tilOgMed: string;
};

export type PlanUkedager = {
    mandag?: string;
    tirsdag?: string;
    onsdag?: string;
    torsdag?: string;
    fredag?: string;
};

export type PleiepengerSyktBarnSøknad = {
    newVersion?: boolean;
    apiDataVersjon?: string;
    språk: 'nb' | 'nn';
    søkerNorskIdent?: string;
    barn: BarnDetaljer;
    arbeidsgivere: Arbeidsgiver[];
    vedlegg: string[];
    fødselsattestVedleggUrls?: string[];
    fraOgMed: string;
    tilOgMed: string;
    medlemskap: Medlemskap;
    utenlandsoppholdIPerioden: UtenlandsoppholdIPerioden;
    ferieuttakIPerioden?: FerieuttakIPerioden;
    opptjeningIUtlandet: OpptjeningIUtlandet[];
    utenlandskNæring: UtenlandskNæring[];
    harBekreftetOpplysninger: boolean;
    harForståttRettigheterOgPlikter: boolean;
    omsorgstilbud?: Omsorgstilbud;
    nattevåk?: Nattevåk;
    beredskap?: Beredskap;
    frilans: Frilans;
    /**
     * StønadGodtgjørelse er deprecated og vil bli fjernet i fremtidige versjoner av APIet
     * @deprecated
     */
    stønadGodtgjørelse?: StønadGodtgjørelse;
    fosterhjemgodtgjørelse?:
        | FosterhjemsgodtgjørelseFrikjøpt
        | FosterhjemsgodtgjørelseIkkeFrikjøpt
        | FosterhjemsgodtgjørelseMottarIkke;
    omsorgsstønad?: OmsorgsstønadMottarDelerAvPerioden | OmsorgsstønadMottarHelePerioden | OmsorgsstønadMottarIkke;
    selvstendigNæringsdrivende: SelvstendigNæringsdrivende;
    barnRelasjon?: 'MOR' | 'MEDMOR' | 'FAR' | 'FOSTERFORELDER' | 'ANNET';
    barnRelasjonBeskrivelse?: string;
    harVærtEllerErVernepliktig?: boolean;
    dataBruktTilUtledningAnnetData?: string;
};

export type Regnskapsfører = {
    navn?: string;
    telefon?: string;
};

export type SelvstendigNæringsdrivende = {
    harInntektSomSelvstendig: boolean;
    virksomhet?: Virksomhet;
    arbeidsforhold?: Arbeidsforhold;
};

export type StønadGodtgjørelse = {
    mottarStønadGodtgjørelse?: boolean;
    startdato?: string;
    sluttdato?: string;
};

export type UtenlandskNæring = {
    næringstype: 'FISKE' | 'JORDBRUK_SKOGBRUK' | 'DAGMAMMA' | 'ANNEN';
    navnPåVirksomheten: string;
    land: Land;
    organisasjonsnummer?: string;
    fraOgMed: string;
    tilOgMed?: string;
};

export type Utenlandsopphold = {
    fraOgMed: string;
    tilOgMed: string;
    landkode: string;
    landnavn: string;
    erUtenforEøs?: boolean;
    erSammenMedBarnet?: boolean;
    erBarnetInnlagt?: boolean;
    perioderBarnetErInnlagt: Periode[];
    getårsak?:
        | 'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING'
        | 'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD'
        | 'ANNET';
};

export type UtenlandsoppholdIPerioden = {
    skalOppholdeSegIUtlandetIPerioden?: boolean;
    opphold: Utenlandsopphold[];
};

export type VarigEndring = {
    dato?: string;
    inntektEtterEndring?: number;
    forklaring?: string;
};

export type Virksomhet = {
    fraOgMed: string;
    tilOgMed?: string;
    næringstype: 'FISKE' | 'JORDBRUK_SKOGBRUK' | 'DAGMAMMA' | 'ANNEN';
    fiskerErPåBladB?: boolean;
    næringsinntekt?: number;
    navnPåVirksomheten: string;
    organisasjonsnummer?: string;
    registrertINorge: boolean;
    registrertIUtlandet?: Land;
    yrkesaktivSisteTreFerdigliknedeÅrene?: YrkesaktivSisteTreFerdigliknedeArene;
    varigEndring?: VarigEndring;
    regnskapsfører?: Regnskapsfører;
    erNyoppstartet: boolean;
    harFlereAktiveVirksomheter: boolean;
};

export type YrkesaktivSisteTreFerdigliknedeArene = {
    oppstartsdato?: string;
};

export type Søker = {
    aktørId: string;
    fødselsdato: string;
    fødselsnummer: string;
    fornavn?: string;
    mellomnavn?: string;
    etternavn?: string;
};

export type BarnOppslag = {
    fødselsdato: string;
    fornavn: string;
    mellomnavn?: string;
    etternavn: string;
    aktørId: string;
};

export type BarnOppslagListe = {
    barn: BarnOppslag[];
};

export type ArbeidsgivereDto = {
    organisasjoner: OrganisasjonDto[];
    privateArbeidsgivere?: PrivatArbeidsgiverDto[];
    frilansoppdrag?: FrilansoppdragDto[];
};

export type FrilansoppdragDto = {
    type: string;
    organisasjonsnummer?: string;
    navn?: string;
    offentligIdent?: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type OrganisasjonDto = {
    organisasjonsnummer: string;
    navn?: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type PrivatArbeidsgiverDto = {
    offentligIdent: string;
    ansattFom?: string;
    ansattTom?: string;
};

export type DeleteMellomlagringData = {
    body?: never;
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type DeleteMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type DeleteMellomlagringError = DeleteMellomlagringErrors[keyof DeleteMellomlagringErrors];

export type DeleteMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetMellomlagringData = {
    body?: never;
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type GetMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type GetMellomlagringError = GetMellomlagringErrors[keyof GetMellomlagringErrors];

export type GetMellomlagringResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetMellomlagringResponse = GetMellomlagringResponses[keyof GetMellomlagringResponses];

export type CreateMellomlagringData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type CreateMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type CreateMellomlagringError = CreateMellomlagringErrors[keyof CreateMellomlagringErrors];

export type CreateMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UpdateMellomlagringData = {
    body: {
        [key: string]: unknown;
    };
    path: {
        ytelse: string;
    };
    query?: never;
    url: '/mellomlagring/{ytelse}';
};

export type UpdateMellomlagringErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type UpdateMellomlagringError = UpdateMellomlagringErrors[keyof UpdateMellomlagringErrors];

export type UpdateMellomlagringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type LagreVedleggData = {
    body?: {
        vedlegg: Blob | File;
    };
    path?: never;
    query?: never;
    url: '/vedlegg';
};

export type LagreVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type LagreVedleggError = LagreVedleggErrors[keyof LagreVedleggErrors];

export type LagreVedleggResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type InnsendingPleiepengerSyktBarnSøknadData = {
    body: PleiepengerSyktBarnSøknad;
    headers: {
        'X-Brukerdialog-Git-Sha': string;
    };
    path?: never;
    query?: never;
    url: '/pleiepenger-sykt-barn/innsending';
};

export type InnsendingPleiepengerSyktBarnSøknadErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type InnsendingPleiepengerSyktBarnSøknadError =
    InnsendingPleiepengerSyktBarnSøknadErrors[keyof InnsendingPleiepengerSyktBarnSøknadErrors];

export type InnsendingPleiepengerSyktBarnSøknadResponses = {
    /**
     * Accepted
     */
    202: unknown;
};

export type SlettVedleggData = {
    body?: never;
    path: {
        vedleggId: string;
    };
    query?: never;
    url: '/vedlegg/{vedleggId}';
};

export type SlettVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type SlettVedleggError = SlettVedleggErrors[keyof SlettVedleggErrors];

export type SlettVedleggResponses = {
    /**
     * No Content
     */
    204: void;
};

export type SlettVedleggResponse = SlettVedleggResponses[keyof SlettVedleggResponses];

export type HentVedleggData = {
    body?: never;
    path: {
        vedleggId: string;
    };
    query?: never;
    url: '/vedlegg/{vedleggId}';
};

export type HentVedleggErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentVedleggError = HentVedleggErrors[keyof HentVedleggErrors];

export type HentVedleggResponses = {
    /**
     * OK
     */
    200: string;
};

export type HentVedleggResponse = HentVedleggResponses[keyof HentVedleggResponses];

export type HentSøkerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oppslag/soker';
};

export type HentSøkerErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentSøkerError = HentSøkerErrors[keyof HentSøkerErrors];

export type HentSøkerResponses = {
    /**
     * OK
     */
    200: Søker;
};

export type HentSøkerResponse = HentSøkerResponses[keyof HentSøkerResponses];

export type HentBarnData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/oppslag/barn';
};

export type HentBarnErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentBarnError = HentBarnErrors[keyof HentBarnErrors];

export type HentBarnResponses = {
    /**
     * OK
     */
    200: BarnOppslagListe;
};

export type HentBarnResponse = HentBarnResponses[keyof HentBarnResponses];

export type HentArbeidsgivereData = {
    body?: never;
    path?: never;
    query: {
        fra_og_med: string;
        til_og_med: string;
        inkluderAlleAnsettelsesperioder?: boolean;
        frilansoppdrag?: boolean;
        private_arbeidsgivere?: boolean;
    };
    url: '/oppslag/arbeidsgiver';
};

export type HentArbeidsgivereErrors = {
    /**
     * Bad Request
     */
    400: ProblemDetail;
    /**
     * Unauthorized
     */
    401: ProblemDetail;
    /**
     * Forbidden
     */
    403: ProblemDetail;
    /**
     * Internal Server Error
     */
    500: ProblemDetail;
};

export type HentArbeidsgivereError = HentArbeidsgivereErrors[keyof HentArbeidsgivereErrors];

export type HentArbeidsgivereResponses = {
    /**
     * OK
     */
    200: ArbeidsgivereDto;
};

export type HentArbeidsgivereResponse = HentArbeidsgivereResponses[keyof HentArbeidsgivereResponses];

export type ClientOptions = {
    baseURL: 'https://k9-brukerdialog-prosessering.intern.dev.nav.no' | (string & {});
};
