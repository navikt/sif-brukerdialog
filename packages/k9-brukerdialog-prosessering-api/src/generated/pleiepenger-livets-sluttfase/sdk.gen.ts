// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type {
    DeleteMellomlagringData,
    DeleteMellomlagringResponses,
    DeleteMellomlagringErrors,
    GetMellomlagringData,
    GetMellomlagringResponses,
    GetMellomlagringErrors,
    CreateMellomlagringData,
    CreateMellomlagringResponses,
    CreateMellomlagringErrors,
    UpdateMellomlagringData,
    UpdateMellomlagringResponses,
    UpdateMellomlagringErrors,
    LagreVedleggData,
    LagreVedleggResponses,
    LagreVedleggErrors,
    SlettVedleggData,
    SlettVedleggResponses,
    SlettVedleggErrors,
    HentVedleggData,
    HentVedleggResponses,
    HentVedleggErrors,
    HentSøkerData,
    HentSøkerResponses,
    HentSøkerErrors,
    HentBarnData,
    HentBarnResponses,
    HentBarnErrors,
    HentArbeidsgivereData,
    HentArbeidsgivereResponses,
    HentArbeidsgivereErrors,
} from './types.gen';
import {
    zDeleteMellomlagringData,
    zGetMellomlagringData,
    zGetMellomlagringResponse,
    zCreateMellomlagringData,
    zUpdateMellomlagringData,
    zLagreVedleggData,
    zSlettVedleggData,
    zSlettVedleggResponse,
    zHentVedleggData,
    zHentVedleggResponse,
    zHentSøkerData,
    zHentSøkerResponse,
    zHentBarnData,
    zHentBarnResponse,
    zHentArbeidsgivereData,
    zHentArbeidsgivereResponse,
} from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
    TData,
    ThrowOnError
> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class MellomlagringController {
    public static deleteMellomlagring<ThrowOnError extends boolean = true>(
        options: Options<DeleteMellomlagringData, ThrowOnError>,
    ) {
        return (options.client ?? _heyApiClient).delete<
            DeleteMellomlagringResponses,
            DeleteMellomlagringErrors,
            ThrowOnError
        >({
            requestValidator: async (data) => {
                return await zDeleteMellomlagringData.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/mellomlagring/{ytelse}',
            ...options,
        });
    }

    public static getMellomlagring<ThrowOnError extends boolean = true>(
        options: Options<GetMellomlagringData, ThrowOnError>,
    ) {
        return (options.client ?? _heyApiClient).get<GetMellomlagringResponses, GetMellomlagringErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zGetMellomlagringData.parseAsync(data);
            },
            responseValidator: async (data) => {
                return await zGetMellomlagringResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/mellomlagring/{ytelse}',
            ...options,
        });
    }

    public static createMellomlagring<ThrowOnError extends boolean = true>(
        options: Options<CreateMellomlagringData, ThrowOnError>,
    ) {
        return (options.client ?? _heyApiClient).post<
            CreateMellomlagringResponses,
            CreateMellomlagringErrors,
            ThrowOnError
        >({
            requestValidator: async (data) => {
                return await zCreateMellomlagringData.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/mellomlagring/{ytelse}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
        });
    }

    public static updateMellomlagring<ThrowOnError extends boolean = true>(
        options: Options<UpdateMellomlagringData, ThrowOnError>,
    ) {
        return (options.client ?? _heyApiClient).put<
            UpdateMellomlagringResponses,
            UpdateMellomlagringErrors,
            ThrowOnError
        >({
            requestValidator: async (data) => {
                return await zUpdateMellomlagringData.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/mellomlagring/{ytelse}',
            ...options,
            headers: {
                'Content-Type': 'application/json',
                ...options.headers,
            },
        });
    }
}

export class VedleggController {
    public static lagreVedlegg<ThrowOnError extends boolean = true>(options?: Options<LagreVedleggData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).post<LagreVedleggResponses, LagreVedleggErrors, ThrowOnError>({
            ...formDataBodySerializer,
            requestValidator: async (data) => {
                return await zLagreVedleggData.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/vedlegg',
            ...options,
            headers: {
                'Content-Type': null,
                ...options?.headers,
            },
        });
    }

    public static slettVedlegg<ThrowOnError extends boolean = true>(options: Options<SlettVedleggData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).delete<SlettVedleggResponses, SlettVedleggErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zSlettVedleggData.parseAsync(data);
            },
            responseValidator: async (data) => {
                return await zSlettVedleggResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/vedlegg/{vedleggId}',
            ...options,
        });
    }

    public static hentVedlegg<ThrowOnError extends boolean = true>(options: Options<HentVedleggData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<HentVedleggResponses, HentVedleggErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zHentVedleggData.parseAsync(data);
            },
            responseValidator: async (data) => {
                return await zHentVedleggResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/vedlegg/{vedleggId}',
            ...options,
        });
    }
}

export class SØkerController {
    public static hentSøker<ThrowOnError extends boolean = true>(options?: Options<HentSøkerData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<HentSøkerResponses, HentSøkerErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zHentSøkerData.parseAsync(data);
            },
            responseValidator: async (data) => {
                return await zHentSøkerResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/oppslag/soker',
            ...options,
        });
    }
}

export class BarnController {
    public static hentBarn<ThrowOnError extends boolean = true>(options?: Options<HentBarnData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<HentBarnResponses, HentBarnErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zHentBarnData.parseAsync(data);
            },
            responseValidator: async (data) => {
                return await zHentBarnResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/oppslag/barn',
            ...options,
        });
    }
}

export class ArbeidsgivereController {
    public static hentArbeidsgivere<ThrowOnError extends boolean = true>(
        options: Options<HentArbeidsgivereData, ThrowOnError>,
    ) {
        return (options.client ?? _heyApiClient).get<HentArbeidsgivereResponses, HentArbeidsgivereErrors, ThrowOnError>(
            {
                requestValidator: async (data) => {
                    return await zHentArbeidsgivereData.parseAsync(data);
                },
                responseValidator: async (data) => {
                    return await zHentArbeidsgivereResponse.parseAsync(data);
                },
                security: [
                    {
                        scheme: 'bearer',
                        type: 'http',
                    },
                ],
                url: '/oppslag/arbeidsgiver',
                ...options,
            },
        );
    }
}
