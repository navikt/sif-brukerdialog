// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zProblemDetail = z.object({
    type: z.string().url().optional(),
    title: z.string().optional(),
    status: z.number().int().optional(),
    detail: z.string().optional(),
    instance: z.string().url().optional(),
    properties: z.object({}).optional(),
});

export const zFriteksfelt = z.object({
    verdi: z.string(),
});

export const zUngdomsytelsesøknad = z.object({
    språk: z.string(),
    startdato: z.string().date(),
    søkerNorskIdent: z.string(),
    harBekreftetOpplysninger: z.boolean(),
    harForståttRettigheterOgPlikter: z.boolean(),
});

export const zEndretSluttdatoUngdomsytelseOppgaveDto = z
    .object({
        oppgaveReferanse: z.string(),
        uttalelse: z.object({
            bekreftelseSvar: z.enum(['GODTAR', 'AVSLÅR']),
            meldingFraDeltaker: z.string().optional(),
        }),
        type: z.string(),
    })
    .merge(
        z.object({
            type: z.literal('BEKREFT_ENDRET_SLUTTDATO'),
        }),
    );

export const zEndretStartdatoUngdomsytelseOppgaveDto = z
    .object({
        oppgaveReferanse: z.string(),
        uttalelse: z.object({
            bekreftelseSvar: z.enum(['GODTAR', 'AVSLÅR']),
            meldingFraDeltaker: z.string().optional(),
        }),
        type: z.string(),
    })
    .merge(
        z.object({
            type: z.literal('BEKREFT_ENDRET_STARTDATO'),
        }),
    );

export const zKontrollerRegisterinntektOppgavetypeDataDto = z
    .object({
        oppgaveReferanse: z.string(),
        uttalelse: z.object({
            bekreftelseSvar: z.enum(['GODTAR', 'AVSLÅR']),
            meldingFraDeltaker: z.string().optional(),
        }),
        type: z.string(),
    })
    .merge(
        z.object({
            type: z.literal('BEKREFT_AVVIK_REGISTERINNTEKT'),
        }),
    );

export const zUngdomsytelseOppgaveDto = z.object({
    oppgaveReferanse: z.string(),
    uttalelse: z.object({
        bekreftelseSvar: z.enum(['GODTAR', 'AVSLÅR']),
        meldingFraDeltaker: z.string().optional(),
    }),
    type: z.string(),
});

export const zUngdomsytelseOppgaveUttalelseDto = z.object({
    bekreftelseSvar: z.enum(['GODTAR', 'AVSLÅR']),
    meldingFraDeltaker: z.string().optional(),
});

export const zUngdomsytelseOppgavebekreftelse = z.object({
    deltakelseId: z.string().uuid(),
    oppgave: z.union([
        zEndretSluttdatoUngdomsytelseOppgaveDto,
        zEndretStartdatoUngdomsytelseOppgaveDto,
        zKontrollerRegisterinntektOppgavetypeDataDto,
    ]),
});

export const zOppgittInntektForPeriode = z.object({
    arbeidstakerOgFrilansInntekt: z.number().int().optional(),
    inntektFraYtelse: z.number().int().optional(),
    periodeForInntekt: z.object({
        fraOgMed: z.string().date(),
        tilOgMed: z.string().date(),
    }),
});

export const zUngPeriode = z.object({
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date(),
});

export const zUngdomsytelseInntektsrapportering = z.object({
    oppgittInntektForPeriode: zOppgittInntektForPeriode,
    harBekreftetInntekt: z.boolean(),
});

export const zArbeidIPeriode = z.object({
    type: z.enum(['ARBEIDER_VANLIG', 'ARBEIDER_REDUSERT', 'ARBEIDER_IKKE', 'IKKE_BESVART']),
    redusertArbeid: z
        .object({
            type: z.enum(['PROSENT_AV_NORMALT', 'TIMER_I_SNITT_PER_UKE', 'ULIKE_UKER_TIMER']),
            prosentAvNormalt: z.number().optional(),
            timerPerUke: z.string().optional(),
            arbeidsuker: z
                .array(
                    z.object({
                        periode: z.object({
                            fraOgMed: z.string().date(),
                            tilOgMed: z.string().date(),
                        }),
                        timer: z.string(),
                    }),
                )
                .optional(),
        })
        .optional(),
});

export const zArbeidsRedusert = z.object({
    type: z.enum(['PROSENT_AV_NORMALT', 'TIMER_I_SNITT_PER_UKE', 'ULIKE_UKER_TIMER']),
    prosentAvNormalt: z.number().optional(),
    timerPerUke: z.string().optional(),
    arbeidsuker: z
        .array(
            z.object({
                periode: z.object({
                    fraOgMed: z.string().date(),
                    tilOgMed: z.string().date(),
                }),
                timer: z.string(),
            }),
        )
        .optional(),
});

export const zArbeidsUke = z.object({
    periode: z.object({
        fraOgMed: z.string().date(),
        tilOgMed: z.string().date(),
    }),
    timer: z.string(),
});

export const zArbeidsforhold = z.object({
    normalarbeidstid: z.object({
        timerPerUkeISnitt: z.string(),
    }),
    arbeidIPeriode: zArbeidIPeriode,
});

export const zArbeidsgiver = z.object({
    organisasjonsnummer: z.string().min(0).max(20).regex(/^\d+$/),
    navn: z.string().min(1),
    erAnsatt: z.boolean(),
    sluttetFørSøknadsperiode: z.boolean().optional(),
    arbeidsforhold: zArbeidsforhold.optional(),
});

export const zBarnDetaljer = z.object({
    fødselsnummer: z.string().length(11).regex(/^\d+$/).optional(),
    fødselsdato: z.string().date().optional(),
    aktørId: z.string().optional(),
    navn: z.string().min(1),
    getårsakManglerIdentitetsnummer: z.enum(['NYFØDT', 'BARNET_BOR_I_UTLANDET', 'ANNET']).optional(),
});

export const zBeredskap = z.object({
    beredskap: z.boolean(),
    tilleggsinformasjon: z.string().optional(),
});

export const zBosted = z.object({
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date(),
    landkode: z.string().min(1),
    landnavn: z.string(),
});

export const zEnkeltdag = z.object({
    dato: z.string().date(),
    tid: z.string(),
});

export const zFerieuttak = z.object({
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date(),
});

export const zFerieuttakIPerioden = z.object({
    skalTaUtFerieIPerioden: z.boolean(),
    ferieuttak: z.array(zFerieuttak),
});

export const zFrilans = z.object({
    harInntektSomFrilanser: z.boolean(),
    startetFørSisteTreHeleMåneder: z.boolean().optional(),
    startdato: z.string().date().optional(),
    sluttdato: z.string().date().optional(),
    misterHonorar: z.boolean().optional(),
    type: z.enum(['FRILANS', 'FRILANS_HONORAR', 'HONORAR']).optional(),
    jobberFortsattSomFrilans: z.boolean().optional(),
    arbeidsforhold: zArbeidsforhold.optional(),
});

export const zLand = z.object({
    landkode: z.string().min(1),
    landnavn: z.string().min(1),
});

export const zMedlemskap = z.object({
    harBoddIUtlandetSiste12Mnd: z.boolean().optional(),
    utenlandsoppholdSiste12Mnd: z.array(zBosted),
    skalBoIUtlandetNeste12Mnd: z.boolean().optional(),
    utenlandsoppholdNeste12Mnd: z.array(zBosted),
});

export const zNattevåk = z.object({
    harNattevåk: z.boolean(),
    tilleggsinformasjon: z.string().optional(),
});

export const zNormalArbeidstid = z.object({
    timerPerUkeISnitt: z.string(),
});

export const zOmsorgstilbud = z.object({
    svarFortid: z.enum(['JA', 'NEI']).optional(),
    svarFremtid: z.enum(['JA', 'NEI', 'USIKKER']).optional(),
    erLiktHverUke: z.boolean().optional(),
    enkeltdager: z.array(zEnkeltdag).optional(),
    ukedager: z
        .object({
            mandag: z.string().optional(),
            tirsdag: z.string().optional(),
            onsdag: z.string().optional(),
            torsdag: z.string().optional(),
            fredag: z.string().optional(),
        })
        .optional(),
});

export const zOpptjeningIUtlandet = z.object({
    navn: z.string(),
    opptjeningType: z.enum(['ARBEIDSTAKER', 'FRILANSER']),
    land: zLand,
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date(),
});

export const zPeriode = z.object({
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date(),
});

export const zPlanUkedager = z.object({
    mandag: z.string().optional(),
    tirsdag: z.string().optional(),
    onsdag: z.string().optional(),
    torsdag: z.string().optional(),
    fredag: z.string().optional(),
});

export const zPleiepengerSyktBarnSøknad = z.object({
    newVersion: z.boolean().optional(),
    apiDataVersjon: z.string().optional(),
    språk: z.enum(['nb', 'nn']),
    søkerNorskIdent: z.string().optional(),
    barn: zBarnDetaljer,
    arbeidsgivere: z.array(zArbeidsgiver),
    vedlegg: z.array(z.string()),
    fødselsattestVedleggUrls: z.array(z.string()).optional(),
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date(),
    medlemskap: zMedlemskap,
    utenlandsoppholdIPerioden: z.object({
        skalOppholdeSegIUtlandetIPerioden: z.boolean().optional(),
        opphold: z.array(
            z.object({
                fraOgMed: z.string().date(),
                tilOgMed: z.string().date(),
                landkode: z.string().min(1),
                landnavn: z.string(),
                erUtenforEøs: z.boolean().optional(),
                erSammenMedBarnet: z.boolean().optional(),
                erBarnetInnlagt: z.boolean().optional(),
                perioderBarnetErInnlagt: z.array(zPeriode),
                getårsak: z
                    .enum([
                        'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',
                        'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',
                        'ANNET',
                    ])
                    .optional(),
            }),
        ),
    }),
    ferieuttakIPerioden: zFerieuttakIPerioden.optional(),
    opptjeningIUtlandet: z.array(zOpptjeningIUtlandet),
    utenlandskNæring: z.array(
        z.object({
            næringstype: z.enum(['FISKE', 'JORDBRUK_SKOGBRUK', 'DAGMAMMA', 'ANNEN']),
            navnPåVirksomheten: z.string(),
            land: zLand,
            organisasjonsnummer: z.string().optional(),
            fraOgMed: z.string().date(),
            tilOgMed: z.string().date().optional(),
        }),
    ),
    harBekreftetOpplysninger: z.boolean(),
    harForståttRettigheterOgPlikter: z.boolean(),
    omsorgstilbud: zOmsorgstilbud.optional(),
    nattevåk: zNattevåk.optional(),
    beredskap: zBeredskap.optional(),
    frilans: zFrilans,
    stønadGodtgjørelse: z
        .object({
            mottarStønadGodtgjørelse: z.boolean().optional(),
            startdato: z.string().date().optional(),
            sluttdato: z.string().date().optional(),
        })
        .optional(),
    selvstendigNæringsdrivende: z.object({
        harInntektSomSelvstendig: z.boolean(),
        virksomhet: z
            .object({
                fraOgMed: z.string().date(),
                tilOgMed: z.string().date().optional(),
                næringstype: z.enum(['FISKE', 'JORDBRUK_SKOGBRUK', 'DAGMAMMA', 'ANNEN']),
                fiskerErPåBladB: z.boolean().optional(),
                næringsinntekt: z.number().int().optional(),
                navnPåVirksomheten: z.string(),
                organisasjonsnummer: z.string().min(0).max(20).regex(/^\d+$/).optional(),
                registrertINorge: z.boolean(),
                registrertIUtlandet: zLand.optional(),
                yrkesaktivSisteTreFerdigliknedeÅrene: z
                    .object({
                        oppstartsdato: z.string().date().optional(),
                    })
                    .optional(),
                varigEndring: z
                    .object({
                        dato: z.string().date().optional(),
                        inntektEtterEndring: z.number().int().optional(),
                        forklaring: z.string().optional(),
                    })
                    .optional(),
                regnskapsfører: z
                    .object({
                        navn: z.string().optional(),
                        telefon: z.string().optional(),
                    })
                    .optional(),
                erNyoppstartet: z.boolean(),
                harFlereAktiveVirksomheter: z.boolean(),
            })
            .optional(),
        arbeidsforhold: zArbeidsforhold.optional(),
    }),
    barnRelasjon: z.enum(['MOR', 'MEDMOR', 'FAR', 'FOSTERFORELDER', 'ANNET']).optional(),
    barnRelasjonBeskrivelse: z.string().optional(),
    harVærtEllerErVernepliktig: z.boolean().optional(),
    dataBruktTilUtledningAnnetData: z.string().optional(),
});

export const zRegnskapsfører = z.object({
    navn: z.string().optional(),
    telefon: z.string().optional(),
});

export const zSelvstendigNæringsdrivende = z.object({
    harInntektSomSelvstendig: z.boolean(),
    virksomhet: z
        .object({
            fraOgMed: z.string().date(),
            tilOgMed: z.string().date().optional(),
            næringstype: z.enum(['FISKE', 'JORDBRUK_SKOGBRUK', 'DAGMAMMA', 'ANNEN']),
            fiskerErPåBladB: z.boolean().optional(),
            næringsinntekt: z.number().int().optional(),
            navnPåVirksomheten: z.string(),
            organisasjonsnummer: z.string().min(0).max(20).regex(/^\d+$/).optional(),
            registrertINorge: z.boolean(),
            registrertIUtlandet: zLand.optional(),
            yrkesaktivSisteTreFerdigliknedeÅrene: z
                .object({
                    oppstartsdato: z.string().date().optional(),
                })
                .optional(),
            varigEndring: z
                .object({
                    dato: z.string().date().optional(),
                    inntektEtterEndring: z.number().int().optional(),
                    forklaring: z.string().optional(),
                })
                .optional(),
            regnskapsfører: zRegnskapsfører.optional(),
            erNyoppstartet: z.boolean(),
            harFlereAktiveVirksomheter: z.boolean(),
        })
        .optional(),
    arbeidsforhold: zArbeidsforhold.optional(),
});

export const zStønadGodtgjørelse = z.object({
    mottarStønadGodtgjørelse: z.boolean().optional(),
    startdato: z.string().date().optional(),
    sluttdato: z.string().date().optional(),
});

export const zUtenlandskNæring = z.object({
    næringstype: z.enum(['FISKE', 'JORDBRUK_SKOGBRUK', 'DAGMAMMA', 'ANNEN']),
    navnPåVirksomheten: z.string(),
    land: zLand,
    organisasjonsnummer: z.string().optional(),
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date().optional(),
});

export const zUtenlandsopphold = z.object({
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date(),
    landkode: z.string().min(1),
    landnavn: z.string(),
    erUtenforEøs: z.boolean().optional(),
    erSammenMedBarnet: z.boolean().optional(),
    erBarnetInnlagt: z.boolean().optional(),
    perioderBarnetErInnlagt: z.array(zPeriode),
    getårsak: z
        .enum([
            'BARNET_INNLAGT_I_HELSEINSTITUSJON_FOR_NORSK_OFFENTLIG_REGNING',
            'BARNET_INNLAGT_I_HELSEINSTITUSJON_DEKKET_ETTER_AVTALE_MED_ET_ANNET_LAND_OM_TRYGD',
            'ANNET',
        ])
        .optional(),
});

export const zUtenlandsoppholdIPerioden = z.object({
    skalOppholdeSegIUtlandetIPerioden: z.boolean().optional(),
    opphold: z.array(zUtenlandsopphold),
});

export const zVarigEndring = z.object({
    dato: z.string().date().optional(),
    inntektEtterEndring: z.number().int().optional(),
    forklaring: z.string().optional(),
});

export const zVirksomhet = z.object({
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date().optional(),
    næringstype: z.enum(['FISKE', 'JORDBRUK_SKOGBRUK', 'DAGMAMMA', 'ANNEN']),
    fiskerErPåBladB: z.boolean().optional(),
    næringsinntekt: z.number().int().optional(),
    navnPåVirksomheten: z.string(),
    organisasjonsnummer: z.string().min(0).max(20).regex(/^\d+$/).optional(),
    registrertINorge: z.boolean(),
    registrertIUtlandet: zLand.optional(),
    yrkesaktivSisteTreFerdigliknedeÅrene: z
        .object({
            oppstartsdato: z.string().date().optional(),
        })
        .optional(),
    varigEndring: zVarigEndring.optional(),
    regnskapsfører: zRegnskapsfører.optional(),
    erNyoppstartet: z.boolean(),
    harFlereAktiveVirksomheter: z.boolean(),
});

export const zYrkesaktivSisteTreFerdigliknedeArene = z.object({
    oppstartsdato: z.string().date().optional(),
});

export const zAnnenAktivitet = z.object({
    periode: z.string(),
    annenAktivitetType: z.enum(['MILITÆR_ELLER_SIVILTJENESTE', '-']),
});

export const zArbeidstaker = z.object({
    norskIdentitetsnummer: z.string().optional(),
    organisasjonsnummer: z.string().optional(),
    organisasjonsnavn: z.string().optional(),
    arbeidstidInfo: z.object({
        perioder: z.object({}),
    }),
});

export const zArbeidstid = z.object({
    arbeidstakerList: z.array(zArbeidstaker),
    frilanserArbeidstidInfo: z
        .object({
            perioder: z.object({}),
        })
        .optional(),
    selvstendigNæringsdrivendeArbeidstidInfo: z
        .object({
            perioder: z.object({}),
        })
        .optional(),
});

export const zArbeidstidInfo = z.object({
    perioder: z.object({}),
});

export const zArbeidstidPeriodeInfo = z.object({
    jobberNormaltTimerPerDag: z.string(),
    faktiskArbeidTimerPerDag: z.string(),
});

export const zBarn = z.object({
    norskIdentitetsnummer: z.string(),
    fødselsdato: z.string().date().optional(),
});

export const zBostedPeriodeInfo = z.object({
    land: z.string(),
});

export const zBosteder = z.object({
    perioder: z.object({}).optional(),
    perioderSomSkalSlettes: z.object({}).optional(),
});

export const zDataBruktTilUtledning = z.object({
    harForståttRettigheterOgPlikter: z.boolean(),
    harBekreftetOpplysninger: z.boolean(),
    soknadDialogCommitSha: z.string().optional(),
    annetData: z.string().optional(),
});

export const zEndringsmelding = z.object({
    språk: z.string(),
    pleietrengendeNavn: z.string().optional(),
    gyldigeEndringsPerioder: z.array(z.string()).optional(),
    søkerNorskIdent: z.string().optional(),
    harBekreftetOpplysninger: z.boolean(),
    harForståttRettigheterOgPlikter: z.boolean(),
    ytelse: z.object({
        barn: zBarn,
        søknadsperiode: z.array(z.string()),
        endringsperiode: z.array(z.string()),
        trekkKravPerioder: z.array(z.string()),
        opptjeningAktivitet: z
            .object({
                selvstendigNæringsdrivende: z.array(zSelvstendigNæringsdrivende),
                frilanser: z
                    .object({
                        startdato: z.string().date(),
                        sluttdato: z.string().date().optional(),
                    })
                    .optional(),
                utenlandskeArbeidsforhold: z.array(
                    z.object({
                        ansettelsePeriode: z.string(),
                        land: z.string(),
                        arbeidsgiversnavn: z.string(),
                    }),
                ),
                andreAktiviteter: z.array(zAnnenAktivitet),
            })
            .optional(),
        dataBruktTilUtledning: zDataBruktTilUtledning.optional(),
        annetDataBruktTilUtledning: zDataBruktTilUtledning.optional(),
        infoFraPunsj: z
            .object({
                søknadenInneholderInfomasjonSomIkkeKanPunsjes: z.boolean().optional(),
                inneholderMedisinskeOpplysninger: z.boolean().optional(),
            })
            .optional(),
        bosteder: zBosteder,
        utenlandsopphold: zUtenlandsopphold,
        beredskap: zBeredskap,
        nattevåk: zNattevåk,
        tilsynsordning: z.object({
            perioder: z.object({}),
        }),
        lovbestemtFerie: z.object({
            perioder: z.object({}),
        }),
        arbeidstid: zArbeidstid,
        uttak: z.object({
            perioder: z.object({}),
        }),
        omsorg: z.object({
            relasjonTilBarnet: z.enum(['MOR', 'MEDMOR', 'FAR', 'FOSTERFORELDER', 'ANNET']).optional(),
            beskrivelseAvOmsorgsrollen: z.string().optional(),
        }),
        erSammenMedBarnet: z.boolean().optional(),
    }),
});

export const zFrilanser = z.object({
    startdato: z.string().date(),
    sluttdato: z.string().date().optional(),
});

export const zInfoFraPunsj = z.object({
    søknadenInneholderInfomasjonSomIkkeKanPunsjes: z.boolean().optional(),
    inneholderMedisinskeOpplysninger: z.boolean().optional(),
});

export const zLovbestemtFerie = z.object({
    perioder: z.object({}),
});

export const zLovbestemtFeriePeriodeInfo = z.object({
    skalHaFerie: z.boolean().optional(),
});

export const zOmsorg = z.object({
    relasjonTilBarnet: z.enum(['MOR', 'MEDMOR', 'FAR', 'FOSTERFORELDER', 'ANNET']).optional(),
    beskrivelseAvOmsorgsrollen: z.string().optional(),
});

export const zOpptjeningAktivitet = z.object({
    selvstendigNæringsdrivende: z.array(zSelvstendigNæringsdrivende),
    frilanser: zFrilanser.optional(),
    utenlandskeArbeidsforhold: z.array(
        z.object({
            ansettelsePeriode: z.string(),
            land: z.string(),
            arbeidsgiversnavn: z.string(),
        }),
    ),
    andreAktiviteter: z.array(zAnnenAktivitet),
});

export const zPleiepengerSyktBarn = z.object({
    barn: zBarn,
    søknadsperiode: z.array(z.string()),
    endringsperiode: z.array(z.string()),
    trekkKravPerioder: z.array(z.string()),
    opptjeningAktivitet: zOpptjeningAktivitet.optional(),
    dataBruktTilUtledning: zDataBruktTilUtledning.optional(),
    annetDataBruktTilUtledning: zDataBruktTilUtledning.optional(),
    infoFraPunsj: zInfoFraPunsj.optional(),
    bosteder: zBosteder,
    utenlandsopphold: zUtenlandsopphold,
    beredskap: zBeredskap,
    nattevåk: zNattevåk,
    tilsynsordning: z.object({
        perioder: z.object({}),
    }),
    lovbestemtFerie: zLovbestemtFerie,
    arbeidstid: zArbeidstid,
    uttak: z.object({
        perioder: z.object({}),
    }),
    omsorg: zOmsorg,
    erSammenMedBarnet: z.boolean().optional(),
});

export const zTilsynPeriodeInfo = z.object({
    etablertTilsynTimerPerDag: z.string(),
});

export const zTilsynsordning = z.object({
    perioder: z.object({}),
});

export const zUtenlandskArbeidsforhold = z.object({
    ansettelsePeriode: z.string(),
    land: z.string(),
    arbeidsgiversnavn: z.string(),
});

export const zUttak = z.object({
    perioder: z.object({}),
});

export const zUttakPeriodeInfo = z.object({
    timerPleieAvBarnetPerDag: z.string(),
});

export const zPleiepengerILivetsSluttfaseSøknad = z.object({
    språk: z.string(),
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date(),
    skalJobbeOgPleieSammeDag: z.boolean(),
    dagerMedPleie: z.array(z.string().date()),
    vedleggUrls: z.array(z.string()),
    opplastetIdVedleggUrls: z.array(z.string()),
    pleietrengende: z.object({
        norskIdentitetsnummer: z.string().length(11).regex(/^\d+$/).optional(),
        fødselsdato: z.string().date().optional(),
        navn: z.string().min(1),
        getårsakManglerIdentitetsnummer: z.enum(['BOR_I_UTLANDET', 'ANNET']).optional(),
    }),
    medlemskap: zMedlemskap,
    utenlandsoppholdIPerioden: zUtenlandsoppholdIPerioden,
    arbeidsgivere: z.array(zArbeidsgiver),
    frilans: zFrilans.optional(),
    selvstendigNæringsdrivende: zSelvstendigNæringsdrivende.optional(),
    opptjeningIUtlandet: z.array(zOpptjeningIUtlandet),
    utenlandskNæring: z.array(zUtenlandskNæring),
    harVærtEllerErVernepliktig: z.boolean().optional(),
    pleierDuDenSykeHjemme: z.boolean().optional(),
    søkerNorskIdent: z.string().optional(),
    harBekreftetOpplysninger: z.boolean(),
    harForståttRettigheterOgPlikter: z.boolean(),
    flereSokere: z.enum(['JA', 'NEI', 'USIKKER']).optional(),
    dataBruktTilUtledningAnnetData: z.string().optional(),
});

export const zPleietrengende = z.object({
    norskIdentitetsnummer: z.string().length(11).regex(/^\d+$/).optional(),
    fødselsdato: z.string().date().optional(),
    navn: z.string().min(1),
    getårsakManglerIdentitetsnummer: z.enum(['BOR_I_UTLANDET', 'ANNET']).optional(),
});

export const zFamiliePdfPostRequest = z.object({
    label: z.string(),
    verdiliste: z.array(
        z.object({
            label: z.string(),
            visningsVariant: z.string().optional(),
            verdi: z.string().optional(),
            alternativer: z.string().optional(),
        }),
    ),
    pdfConfig: z.object({
        harInnholdsfortegnelse: z.boolean(),
        språk: z.string(),
    }),
    skjemanummer: z.string().optional(),
});

export const zPdfConfig = z.object({
    harInnholdsfortegnelse: z.boolean(),
    språk: z.string(),
});

export const zVerdilisteElement = z.object({
    label: z.string(),
    visningsVariant: z.string().optional(),
    verdi: z.string().optional(),
    alternativer: z.string().optional(),
});

export const zArbeidsforholdOlp = z.object({
    jobberNormaltTimer: z.number(),
    arbeidIPeriode: zArbeidIPeriode,
});

export const zArbeidsgiverOlp = z.object({
    organisasjonsnummer: z.string().optional(),
    navn: z.string().optional(),
    erAnsatt: z.boolean().optional(),
    sluttetFørSøknadsperiode: z.boolean().optional(),
    arbeidsforhold: zArbeidsforholdOlp.optional(),
});

export const zFrilansOlp = z.object({
    startdato: z.string().date(),
    sluttdato: z.string().date().optional(),
    jobberFortsattSomFrilans: z.boolean(),
    arbeidsforhold: zArbeidsforholdOlp.optional(),
    harHattInntektSomFrilanser: z.boolean(),
});

export const zKurs = z.object({
    kursholder: z.object({
        uuid: z.string().uuid().optional(),
        navn: z.string().min(1),
    }),
    kursperioder: z.array(z.string()).min(1),
    reise: z.object({
        reiserUtenforKursdager: z.boolean(),
        reisedager: z.array(z.string().date()).optional(),
        reisedagerBeskrivelse: z.string().optional(),
    }),
});

export const zKursholder = z.object({
    uuid: z.string().uuid().optional(),
    navn: z.string().min(1),
});

export const zOpplæringspengerSøknad = z.object({
    newVersion: z.boolean().optional(),
    apiDataVersjon: z.string().optional(),
    språk: z.enum(['nb', 'nn']),
    søkerNorskIdent: z.string().optional(),
    barn: zBarnDetaljer,
    arbeidsgivere: z.array(zArbeidsgiverOlp),
    vedlegg: z.array(z.string()),
    fraOgMed: z.string().date(),
    tilOgMed: z.string().date(),
    medlemskap: zMedlemskap,
    ferieuttakIPerioden: zFerieuttakIPerioden.optional(),
    opptjeningIUtlandet: z.array(zOpptjeningIUtlandet),
    utenlandskNæring: z.array(zUtenlandskNæring),
    harBekreftetOpplysninger: z.boolean(),
    harForståttRettigheterOgPlikter: z.boolean(),
    frilans: zFrilansOlp.optional(),
    selvstendigNæringsdrivende: z
        .object({
            virksomhet: zVirksomhet,
            arbeidsforhold: zArbeidsforholdOlp,
        })
        .optional(),
    stønadGodtgjørelse: zStønadGodtgjørelse.optional(),
    harVærtEllerErVernepliktig: z.boolean().optional(),
    dataBruktTilUtledningAnnetData: z.string().optional(),
    kurs: zKurs,
});

export const zReise = z.object({
    reiserUtenforKursdager: z.boolean(),
    reisedager: z.array(z.string().date()).optional(),
    reisedagerBeskrivelse: z.string().optional(),
});

export const zSelvstendigNæringsdrivendeOlp = z.object({
    virksomhet: zVirksomhet,
    arbeidsforhold: zArbeidsforholdOlp,
});

export const zOmsorgspengerKroniskSyktBarnSøknad = z.object({
    språk: z.string(),
    barn: zBarn,
    legeerklæring: z.array(z.string()),
    samværsavtale: z.array(z.string()).optional(),
    relasjonTilBarnet: z.enum(['MOR', 'FAR', 'FOSTERFORELDER', 'ADOPTIVFORELDER']).optional(),
    kroniskEllerFunksjonshemming: z.boolean(),
    søkerNorskIdent: z.string().optional(),
    harForståttRettigheterOgPlikter: z.boolean(),
    harBekreftetOpplysninger: z.boolean(),
    sammeAdresse: z.enum(['JA', 'JA_DELT_BOSTED', 'NEI']),
    høyereRisikoForFravær: z.boolean().optional(),
    høyereRisikoForFraværBeskrivelse: z.string().min(1).max(1000).optional(),
    dataBruktTilUtledningAnnetData: z.string().optional(),
});

export const zBekreftelser = z.object({
    harBekreftetOpplysninger: z.boolean(),
    harForståttRettigheterOgPlikter: z.boolean(),
});

export const zOmsorgspengerutbetalingSnfSøknad = z.object({
    språk: z.string(),
    søkerNorskIdent: z.string().optional(),
    bosteder: z.array(zBosted),
    opphold: z.array(zBosted),
    spørsmål: z.array(
        z.object({
            spørsmål: z.string().min(0).max(1000),
            svar: z.boolean(),
        }),
    ),
    harDekketTiFørsteDagerSelv: z.boolean().optional(),
    harSyktBarn: z.boolean().optional(),
    harAleneomsorg: z.boolean().optional(),
    bekreftelser: zBekreftelser,
    utbetalingsperioder: z.array(
        z.object({
            fraOgMed: z.string().date().optional(),
            tilOgMed: z.string().date().optional(),
            antallTimerBorte: z.string().optional(),
            antallTimerPlanlagt: z.string().optional(),
            årsak: z.enum(['STENGT_SKOLE_ELLER_BARNEHAGE', 'SMITTEVERNHENSYN', 'ORDINÆRT_FRAVÆR']).optional(),
            aktivitetFravær: z.array(z.enum(['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_VIRKSOMHET'])).optional(),
        }),
    ),
    barn: z.array(zBarn),
    frilans: zFrilans.optional(),
    selvstendigNæringsdrivende: zVirksomhet.optional(),
    erArbeidstakerOgså: z.boolean(),
    vedlegg: z.array(z.string()),
    dataBruktTilUtledningAnnetData: z.string().optional(),
});

export const zSpørsmålOgSvar = z.object({
    spørsmål: z.string().min(0).max(1000),
    svar: z.boolean(),
});

export const zUtbetalingsperiode = z.object({
    fraOgMed: z.string().date().optional(),
    tilOgMed: z.string().date().optional(),
    antallTimerBorte: z.string().optional(),
    antallTimerPlanlagt: z.string().optional(),
    årsak: z.enum(['STENGT_SKOLE_ELLER_BARNEHAGE', 'SMITTEVERNHENSYN', 'ORDINÆRT_FRAVÆR']).optional(),
    aktivitetFravær: z.array(z.enum(['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_VIRKSOMHET'])).optional(),
});

export const zDineBarn = z.object({
    barn: z.array(zBarn),
    harDeltBosted: z.boolean(),
});

export const zOmsorgspengerutbetalingArbeidstakerSøknad = z.object({
    språk: z.string(),
    vedlegg: z.array(z.string()),
    søkerNorskIdent: z.string().optional(),
    bosteder: z.array(zBosted),
    opphold: z.array(zBosted),
    bekreftelser: zBekreftelser.optional(),
    arbeidsgivere: z.array(zArbeidsgiver).optional(),
    dineBarn: zDineBarn.optional(),
    hjemmePgaSmittevernhensyn: z.boolean().optional(),
    hjemmePgaStengtBhgSkole: z.boolean().optional(),
    dataBruktTilUtledningAnnetData: z.string().optional(),
});

export const zAnnenForelder = z.object({
    fnr: z.string().length(11).regex(/^\d+$/),
    navn: z.string().min(1),
    situasjon: z.enum(['INNLAGT_I_HELSEINSTITUSJON', 'UTØVER_VERNEPLIKT', 'FENGSEL', 'SYKDOM', 'ANNET']),
    situasjonBeskrivelse: z.string().optional(),
    periodeOver6Måneder: z.boolean().optional(),
    periodeFraOgMed: z.string().date(),
    periodeTilOgMed: z.string().date().optional(),
});

export const zOmsorgspengerMidlertidigAleneSøknad = z.object({
    id: z.string(),
    språk: z.string(),
    søkerNorskIdent: z.string().optional(),
    annenForelder: zAnnenForelder,
    barn: z.array(zBarn).min(1),
    harBekreftetOpplysninger: z.boolean(),
    harForståttRettigheterOgPlikter: z.boolean(),
    dataBruktTilUtledningAnnetData: z.string().optional(),
});

export const zOmsorgsdagerAleneOmOmsorgenSøknad = z.object({
    språk: z.string(),
    søkerNorskIdent: z.string().optional(),
    barn: z.array(zBarn).min(1),
    harBekreftetOpplysninger: z.boolean(),
    harForståttRettigheterOgPlikter: z.boolean(),
    dataBruktTilUtledningAnnetData: z.string().optional(),
});

export const zEttersendelse = z.object({
    språk: z.string(),
    vedlegg: z.array(z.string()).min(1),
    beskrivelse: z.string().optional(),
    søknadstype: z.enum([
        'PLEIEPENGER_SYKT_BARN',
        'PLEIEPENGER_LIVETS_SLUTTFASE',
        'OMP_UT_SNF',
        'OMP_UT_ARBEIDSTAKER',
        'OMP_UTV_KS',
        'OMP_UTV_MA',
        'OMP_UTV_AO',
        'OPPLÆRINGSPENGER',
    ]),
    ettersendelsesType: z.enum(['LEGEERKLÆRING', 'ANNET']),
    søkerNorskIdent: z.string().optional(),
    pleietrengende: zPleietrengende.optional(),
    harBekreftetOpplysninger: z.boolean(),
    harForståttRettigheterOgPlikter: z.boolean(),
});

export const zSøker = z.object({
    aktørId: z.string(),
    fødselsdato: z.string().date(),
    fødselsnummer: z.string(),
    fornavn: z.string().optional(),
    mellomnavn: z.string().optional(),
    etternavn: z.string().optional(),
});

export const zBarnOppslag = z.object({
    fødselsdato: z.string().date(),
    fornavn: z.string(),
    mellomnavn: z.string().optional(),
    etternavn: z.string(),
    aktørId: z.string(),
});

export const zBarnOppslagListe = z.object({
    barn: z.array(zBarnOppslag),
});

export const zArbeidsgivereDto = z.object({
    organisasjoner: z.array(
        z.object({
            organisasjonsnummer: z.string(),
            navn: z.string().optional(),
            ansattFom: z.string().date().optional(),
            ansattTom: z.string().date().optional(),
        }),
    ),
    privateArbeidsgivere: z
        .array(
            z.object({
                offentligIdent: z.string(),
                ansattFom: z.string().date().optional(),
                ansattTom: z.string().date().optional(),
            }),
        )
        .optional(),
    frilansoppdrag: z
        .array(
            z.object({
                type: z.string(),
                organisasjonsnummer: z.string().optional(),
                navn: z.string().optional(),
                offentligIdent: z.string().optional(),
                ansattFom: z.string().date().optional(),
                ansattTom: z.string().date().optional(),
            }),
        )
        .optional(),
});

export const zFrilansoppdragDto = z.object({
    type: z.string(),
    organisasjonsnummer: z.string().optional(),
    navn: z.string().optional(),
    offentligIdent: z.string().optional(),
    ansattFom: z.string().date().optional(),
    ansattTom: z.string().date().optional(),
});

export const zOrganisasjonDto = z.object({
    organisasjonsnummer: z.string(),
    navn: z.string().optional(),
    ansattFom: z.string().date().optional(),
    ansattTom: z.string().date().optional(),
});

export const zPrivatArbeidsgiverDto = z.object({
    offentligIdent: z.string(),
    ansattFom: z.string().date().optional(),
    ansattTom: z.string().date().optional(),
});

export const zGetMellomlagringResponse = z.string();

export const zLagPdfResponse = z.string();

export const zSlettVedleggResponse = z.void();

export const zHentVedleggResponse = z.string();

export const zHentSøkerResponse = zSøker;

export const zHentBarnResponse = zBarnOppslagListe;

export const zHentArbeidsgivereResponse = zArbeidsgivereDto;
