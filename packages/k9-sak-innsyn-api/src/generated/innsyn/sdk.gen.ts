// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type {
    HentSøknaderData,
    HentSøknaderResponses,
    HentSøknaderErrors,
    LastNedArbeidsgivermeldingData,
    LastNedArbeidsgivermeldingResponses,
    LastNedArbeidsgivermeldingErrors,
    HentMineSakerData,
    HentMineSakerResponses,
    HentMineSakerErrors,
    HentSaksbehandlingstidData,
    HentSaksbehandlingstidResponses,
    HentSaksbehandlingstidErrors,
    HentDokumentData,
    HentDokumentResponses,
    HentDokumentErrors,
} from './types.gen';
import {
    zHentSøknaderData,
    zHentSøknaderResponse,
    zLastNedArbeidsgivermeldingData,
    zLastNedArbeidsgivermeldingResponse,
    zHentMineSakerData,
    zHentMineSakerResponse,
    zHentSaksbehandlingstidData,
    zHentSaksbehandlingstidResponse,
    zHentDokumentData,
    zHentDokumentResponse,
} from './zod.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<
    TData,
    ThrowOnError
> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class SØknadController {
    public static hentSøknader<ThrowOnError extends boolean = true>(options?: Options<HentSøknaderData, ThrowOnError>) {
        return (options?.client ?? _heyApiClient).get<HentSøknaderResponses, HentSøknaderErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zHentSøknaderData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zHentSøknaderResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/soknad',
            ...options,
        });
    }

    public static lastNedArbeidsgivermelding<ThrowOnError extends boolean = true>(
        options: Options<LastNedArbeidsgivermeldingData, ThrowOnError>,
    ) {
        return (options.client ?? _heyApiClient).get<
            LastNedArbeidsgivermeldingResponses,
            LastNedArbeidsgivermeldingErrors,
            ThrowOnError
        >({
            requestValidator: async (data) => {
                return await zLastNedArbeidsgivermeldingData.parseAsync(data);
            },
            responseType: 'blob',
            responseValidator: async (data) => {
                return await zLastNedArbeidsgivermeldingResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/soknad/{søknadId}/arbeidsgivermelding',
            ...options,
        });
    }
}

export class SakController {
    /**
     * Henter sakene registrert på pleietrengende som bruker har omsorgen for
     */
    public static hentMineSaker<ThrowOnError extends boolean = true>(
        options?: Options<HentMineSakerData, ThrowOnError>,
    ) {
        return (options?.client ?? _heyApiClient).get<HentMineSakerResponses, HentMineSakerErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zHentMineSakerData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zHentMineSakerResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/saker',
            ...options,
        });
    }

    public static hentSaksbehandlingstid<ThrowOnError extends boolean = true>(
        options?: Options<HentSaksbehandlingstidData, ThrowOnError>,
    ) {
        return (options?.client ?? _heyApiClient).get<
            HentSaksbehandlingstidResponses,
            HentSaksbehandlingstidErrors,
            ThrowOnError
        >({
            requestValidator: async (data) => {
                return await zHentSaksbehandlingstidData.parseAsync(data);
            },
            responseType: 'json',
            responseValidator: async (data) => {
                return await zHentSaksbehandlingstidResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/saker/saksbehandlingstid',
            ...options,
        });
    }
}

export class DokumentController {
    public static hentDokument<ThrowOnError extends boolean = true>(options: Options<HentDokumentData, ThrowOnError>) {
        return (options.client ?? _heyApiClient).get<HentDokumentResponses, HentDokumentErrors, ThrowOnError>({
            requestValidator: async (data) => {
                return await zHentDokumentData.parseAsync(data);
            },
            responseType: 'blob',
            responseValidator: async (data) => {
                return await zHentDokumentResponse.parseAsync(data);
            },
            security: [
                {
                    scheme: 'bearer',
                    type: 'http',
                },
                {
                    scheme: 'bearer',
                    type: 'http',
                },
            ],
            url: '/dokument/{journalpostId}/{dokumentInfoId}/{variantFormat}',
            ...options,
        });
    }
}
