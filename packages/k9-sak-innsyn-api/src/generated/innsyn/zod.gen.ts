// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zProblemDetail = z.object({
    type: z.optional(z.url()),
    title: z.optional(z.string()),
    status: z.optional(z.int()),
    detail: z.optional(z.string()),
    instance: z.optional(z.url()),
    properties: z.optional(z.record(z.string(), z.unknown())),
});

export const zAdressebeskyttelse = z.object({
    gradering: z.enum(['STRENGT_FORTROLIG_UTLAND', 'STRENGT_FORTROLIG', 'FORTROLIG', 'UGRADERT']),
});

export const zAnnenAktivitet = z.object({
    periode: z.string(),
    annenAktivitetType: z.enum(['MILITÆR_ELLER_SIVILTJENESTE', '-']),
});

export const zAnnenForelder = z.object({
    norskIdentitetsnummer: z.string(),
    situasjon: z.enum(['INNLAGT_I_HELSEINSTITUSJON', 'UTØVER_VERNEPLIKT', 'FENGSEL', 'SYKDOM', 'ANNET']),
    situasjonBeskrivelse: z.optional(z.string()),
    periode: z.optional(z.string()),
});

export const zArbeidstidPeriodeInfo = z.object({
    jobberNormaltTimerPerDag: z.string(),
    faktiskArbeidTimerPerDag: z.string(),
});

export const zArbeidstidInfo = z.object({
    perioder: z.record(z.string(), zArbeidstidPeriodeInfo),
});

export const zArbeidstaker = z.object({
    norskIdentitetsnummer: z.optional(z.string()),
    organisasjonsnummer: z.optional(z.string()),
    organisasjonsnavn: z.optional(z.string()),
    arbeidstidInfo: zArbeidstidInfo,
});

export const zArbeidstid = z.object({
    arbeidstakerList: z.array(zArbeidstaker),
    frilanserArbeidstidInfo: z.optional(zArbeidstidInfo),
    selvstendigNæringsdrivendeArbeidstidInfo: z.optional(zArbeidstidInfo),
});

export const zBarn = z.object({
    norskIdentitetsnummer: z.string(),
    fødselsdato: z.optional(z.iso.date()),
});

export const zBarnOppslagDto = z.object({
    fødselsdato: z.iso.date(),
    fornavn: z.string(),
    mellomnavn: z.optional(z.string()),
    etternavn: z.string(),
    aktørId: z.string(),
    identitetsnummer: z.optional(z.string()),
    adressebeskyttelse$k9_sak_innsyn_api: z.array(zAdressebeskyttelse),
});

export const zBegrunnelseForInnsending = z.object({
    tekst: z.optional(z.string()),
});

export const zBeredskapPeriodeInfo = z.object({
    tilleggsinformasjon: z.string().min(0).max(4000),
});

export const zBeredskap = z.object({
    perioder: z.record(z.string(), zBeredskapPeriodeInfo),
    perioderSomSkalSlettes: z.optional(z.record(z.string(), zBeredskapPeriodeInfo)),
});

export const zBostedPeriodeInfo = z.object({
    land: z.string(),
});

export const zBosteder = z.object({
    perioder: z.optional(z.record(z.string(), zBostedPeriodeInfo)),
    perioderSomSkalSlettes: z.optional(z.record(z.string(), zBostedPeriodeInfo)),
});

export const zDataBruktTilUtledning = z.object({
    harForståttRettigheterOgPlikter: z.boolean(),
    harBekreftetOpplysninger: z.boolean(),
    soknadDialogCommitSha: z.optional(z.string()),
    annetData: z.optional(z.string()),
});

export const zDelvisFravær = z.object({
    normalarbeidstid: z.string(),
    fravær: z.string(),
});

export const zFraværPeriode = z.object({
    periode: z.string(),
    duration: z.optional(z.string()),
    delvisFravær: z.optional(zDelvisFravær),
    årsak: z.enum(['STENGT_SKOLE_ELLER_BARNEHAGE', 'SMITTEVERNHENSYN', 'ORDINÆRT_FRAVÆR']),
    søknadÅrsak: z.optional(
        z.enum(['ARBEIDSGIVER_KONKURS', 'NYOPPSTARTET_HOS_ARBEIDSGIVER', 'KONFLIKT_MED_ARBEIDSGIVER']),
    ),
    aktivitetFravær: z
        .array(z.enum(['ARBEIDSTAKER', 'FRILANSER', 'SELVSTENDIG_VIRKSOMHET']))
        .min(1)
        .max(2),
    organisasjonsnummer: z.optional(z.string()),
    arbeidsforholdId: z.optional(z.string()),
    arbeidsgiverOrgNr: z.optional(z.string()),
});

export const zFrilanser = z.object({
    startdato: z.iso.date(),
    sluttdato: z.optional(z.iso.date()),
});

export const zInfoFraPunsj = z.object({
    søknadenInneholderInfomasjonSomIkkeKanPunsjes: z.optional(z.boolean()),
    inneholderMedisinskeOpplysninger: z.optional(z.boolean()),
});

export const zJournalpost = z.object({
    inneholderInfomasjonSomIkkeKanPunsjes: z.boolean(),
    inneholderInformasjonSomIkkeKanPunsjes: z.boolean(),
    inneholderMedisinskeOpplysninger: z.boolean(),
    journalpostId: z.string().min(3).max(50),
});

export const zKursholder = z.object({
    navn: z.optional(z.string().min(0).max(100)),
    institusjonsidentifikator: z.optional(z.uuid()),
});

export const zReise = z.object({
    reiserUtenforKursdager: z.boolean(),
    reisedager: z.optional(z.array(z.iso.date())),
    reisedagerBeskrivelse: z.optional(z.string().min(0).max(4000)),
});

export const zKurs = z.object({
    kursholder: zKursholder,
    kursperioder: z.array(z.string()).min(1).max(2147483647),
    reise: zReise,
});

export const zLovbestemtFeriePeriodeInfo = z.object({
    skalHaFerie: z.optional(z.boolean()),
});

export const zLovbestemtFerie = z.object({
    perioder: z.record(z.string(), zLovbestemtFeriePeriodeInfo),
});

export const zNattevåkPeriodeInfo = z.object({
    tilleggsinformasjon: z.string().min(0).max(4000),
});

export const zNattevåk = z.object({
    perioder: z.record(z.string(), zNattevåkPeriodeInfo),
    perioderSomSkalSlettes: z.record(z.string(), zNattevåkPeriodeInfo),
});

export const zOmsorg = z.object({
    relasjonTilBarnet: z.optional(z.enum(['MOR', 'MEDMOR', 'FAR', 'FOSTERFORELDER', 'ANNET'])),
    beskrivelseAvOmsorgsrollen: z.optional(z.string()),
});

export const zYtelse = z.object({
    type: z.string(),
});

export const zOmsorgspengerAleneOmsorg = zYtelse
    .and(
        z.object({
            type: z.literal('OmsorgspengerAleneOmsorg'),
        }),
    )
    .and(
        z.object({
            barn: zBarn,
            periode: z.string(),
            dataBruktTilUtledning: z.optional(zDataBruktTilUtledning),
        }),
    );

export const zOmsorgspengerKroniskSyktBarn = zYtelse
    .and(
        z.object({
            type: z.literal('OmsorgspengerKroniskSyktBarn'),
        }),
    )
    .and(
        z.object({
            barn: zBarn,
            kroniskEllerFunksjonshemming: z.boolean(),
            høyereRisikoForFravær: z.optional(z.boolean()),
            høyereRisikoForFraværBeskrivelse: z.optional(z.string().min(1).max(1000)),
            dataBruktTilUtledning: z.optional(zDataBruktTilUtledning),
        }),
    );

export const zOmsorgspengerMidlertidigAlene = zYtelse
    .and(
        z.object({
            type: z.literal('OmsorgspengerMidlertidigAlene'),
        }),
    )
    .and(
        z.object({
            barn: z.array(zBarn),
            annenForelder: zAnnenForelder,
            begrunnelse: z.optional(z.string().min(0).max(30000)),
            dataBruktTilUtledning: z.optional(zDataBruktTilUtledning),
        }),
    );

export const zSelvstendigNæringsdrivendePeriodeInfo = z.object({
    virksomhetstyper: z.array(z.enum(['DAGMAMMA', 'FISKE', 'JORDBRUK_SKOGBRUK', 'ANNEN', '-'])).min(1),
    regnskapsførerNavn: z.optional(z.string()),
    regnskapsførerTlf: z.optional(z.string()),
    erVarigEndring: z.optional(z.boolean()),
    erNyIArbeidslivet: z.optional(z.boolean()),
    endringDato: z.optional(z.iso.date()),
    endringBegrunnelse: z.optional(z.string()),
    bruttoInntekt: z.optional(z.number().gte(0).lte(10000000)),
    erNyoppstartet: z.optional(z.boolean()),
    registrertIUtlandet: z.optional(z.boolean()),
    landkode: z.optional(z.string()),
    erFiskerPåBladB: z.optional(z.boolean()),
});

export const zSelvstendigNæringsdrivende = z.object({
    perioder: z.record(z.string(), zSelvstendigNæringsdrivendePeriodeInfo),
    organisasjonsnummer: z.optional(z.string()),
    virksomhetNavn: z.optional(z.string()),
});

export const zUtenlandskArbeidsforhold = z.object({
    ansettelsePeriode: z.string(),
    land: z.string(),
    arbeidsgiversnavn: z.string(),
});

export const zOpptjeningAktivitet = z.object({
    selvstendigNæringsdrivende: z.array(zSelvstendigNæringsdrivende),
    frilanser: z.optional(zFrilanser),
    utenlandskeArbeidsforhold: z.array(zUtenlandskArbeidsforhold),
    andreAktiviteter: z.array(zAnnenAktivitet),
});

export const zUtenlandsoppholdPeriodeInfo = z.object({
    land: z.string(),
    årsak: z.optional(
        z.enum([
            'barnetInnlagtIHelseinstitusjonForNorskOffentligRegning',
            'barnetInnlagtIHelseinstitusjonDekketEtterAvtaleMedEtAnnetLandOmTrygd',
        ]),
    ),
    erSammenMedBarnet: z.optional(z.boolean()),
});

export const zUtenlandsopphold = z.object({
    perioder: z.optional(z.record(z.string(), zUtenlandsoppholdPeriodeInfo)),
    perioderSomSkalSlettes: z.optional(z.record(z.string(), zUtenlandsoppholdPeriodeInfo)),
});

export const zOmsorgspengerUtbetaling = zYtelse
    .and(
        z.object({
            type: z.literal('OmsorgspengerUtbetaling'),
        }),
    )
    .and(
        z.object({
            fosterbarn: z.optional(z.array(zBarn)),
            aktivitet: z.optional(zOpptjeningAktivitet),
            fraværsperioder: z.optional(z.array(zFraværPeriode)),
            fraværsperioderKorrigeringIm: z.optional(z.array(zFraværPeriode)),
            bosteder: z.optional(zBosteder),
            utenlandsopphold: z.optional(zUtenlandsopphold),
            dataBruktTilUtledning: z.optional(zDataBruktTilUtledning),
        }),
    );

export const zOppgittInntektForPeriode = z.object({
    arbeidstakerOgFrilansInntekt: z.optional(z.number().gte(0).lte(10000000)),
    næringsinntekt: z.optional(z.number().gte(0).lte(10000000)),
    ytelse: z.optional(z.number().gte(0).lte(10000000)),
    periode: z.string(),
});

export const zOppgittInntekt = z.object({
    oppgittePeriodeinntekter: z.array(zOppgittInntektForPeriode).min(1).max(2147483647),
});

export const zUttakPeriodeInfo = z.object({
    timerPleieAvBarnetPerDag: z.string(),
});

export const zUttak = z.object({
    perioder: z.record(z.string(), zUttakPeriodeInfo),
});

export const zOpplæringspenger = zYtelse
    .and(
        z.object({
            type: z.literal('Opplæringspenger'),
        }),
    )
    .and(
        z.object({
            barn: zBarn,
            søknadsperiode: z.array(z.string()),
            trekkKravPerioder: z.array(z.string()),
            opptjeningAktivitet: zOpptjeningAktivitet,
            dataBruktTilUtledning: z.optional(zDataBruktTilUtledning),
            bosteder: zBosteder,
            utenlandsopphold: zUtenlandsopphold,
            lovbestemtFerie: zLovbestemtFerie,
            arbeidstid: zArbeidstid,
            uttak: zUttak,
            omsorg: zOmsorg,
            kurs: zKurs,
        }),
    );

export const zTilsynPeriodeInfo = z.object({
    etablertTilsynTimerPerDag: z.string(),
});

export const zTilsynsordning = z.object({
    perioder: z.record(z.string(), zTilsynPeriodeInfo),
});

export const zPleiepengerSyktBarn = zYtelse
    .and(
        z.object({
            type: z.literal('PleiepengerSyktBarn'),
        }),
    )
    .and(
        z.object({
            barn: zBarn,
            søknadsperiode: z.array(z.string()),
            endringsperiode: z.array(z.string()),
            trekkKravPerioder: z.array(z.string()),
            opptjeningAktivitet: z.optional(zOpptjeningAktivitet),
            dataBruktTilUtledning: z.optional(zDataBruktTilUtledning),
            annetDataBruktTilUtledning: z.optional(zDataBruktTilUtledning),
            infoFraPunsj: z.optional(zInfoFraPunsj),
            bosteder: zBosteder,
            utenlandsopphold: zUtenlandsopphold,
            beredskap: zBeredskap,
            nattevåk: zNattevåk,
            tilsynsordning: zTilsynsordning,
            lovbestemtFerie: zLovbestemtFerie,
            arbeidstid: zArbeidstid,
            uttak: zUttak,
            omsorg: zOmsorg,
            erSammenMedBarnet: z.optional(z.boolean()),
        }),
    );

export const zPleietrengende = z.object({
    norskIdentitetsnummer: z.optional(z.string()),
    fødselsdato: z.optional(z.iso.date()),
});

export const zPleipengerLivetsSluttfase = zYtelse
    .and(
        z.object({
            type: z.literal('PleipengerLivetsSluttfase'),
        }),
    )
    .and(
        z.object({
            pleietrengende: zPleietrengende,
            søknadsperiode: z.array(z.string()),
            trekkKravPerioder: z.array(z.string()),
            opptjeningAktivitet: z.optional(zOpptjeningAktivitet),
            bosteder: zBosteder,
            utenlandsopphold: zUtenlandsopphold,
            arbeidstid: zArbeidstid,
            uttak: z.optional(zUttak),
            lovbestemtFerie: z.optional(zLovbestemtFerie),
            dataBruktTilUtledning: z.optional(zDataBruktTilUtledning),
        }),
    );

export const zSøker = z.object({
    norskIdentitetsnummer: z.string(),
});

export const zUngdomsytelse = zYtelse
    .and(
        z.object({
            type: z.literal('Ungdomsytelse'),
        }),
    )
    .and(
        z.object({
            søknadType: z.enum(['DELTAKELSE_SØKNAD', 'RAPPORTERING_SØKNAD']),
            søktFraDatoer: z.array(z.iso.date()),
            inntekter: z.optional(zOppgittInntekt),
            deltakelseId: z.optional(z.uuid()),
        }),
    );

export const zSøknad = z.object({
    søknadId: z.string(),
    versjon: z.string(),
    mottattDato: z.iso.datetime(),
    søker: zSøker,
    språk: z.optional(z.enum(['nb', 'nn'])),
    ytelse: z.union([
        zOmsorgspengerAleneOmsorg,
        zOmsorgspengerKroniskSyktBarn,
        zOmsorgspengerMidlertidigAlene,
        zOmsorgspengerUtbetaling,
        zOpplæringspenger,
        zPleiepengerSyktBarn,
        zPleipengerLivetsSluttfase,
        zUngdomsytelse,
    ]),
    journalposter: z.optional(z.array(zJournalpost).min(0).max(1000)),
    begrunnelseForInnsending: z.optional(zBegrunnelseForInnsending),
    kildesystem: z.optional(z.string()),
});

export const zSøknadDto = z.object({
    barn: zBarnOppslagDto,
    søknad: zSøknad,
    søknader: z.optional(z.array(zSøknad)),
});

export const zAksjonspunktDto = z.object({
    venteårsak: z.enum(['INNTEKTSMELDING', 'MEDISINSK_DOKUMENTASJON', 'FOR_TIDLIG_SOKNAD', 'MELDEKORT']),
    tidsfrist: z.iso.datetime(),
});

export const zInnsending = z.object({
    versjon: z.optional(z.string()),
    søker: z.optional(zSøker),
    mottattDato: z.optional(z.iso.datetime()),
    søknadId: z.optional(z.string()),
});

export const zRelevantDatoDto = z.object({
    dato: z.string(),
    datotype: z.enum([
        'DATO_OPPRETTET',
        'DATO_SENDT_PRINT',
        'DATO_EKSPEDERT',
        'DATO_JOURNALFOERT',
        'DATO_REGISTRERT',
        'DATO_AVS_RETUR',
        'DATO_DOKUMENT',
        'UKJENT',
    ]),
});

export const zDokumentDto = z.object({
    journalpostId: z.string(),
    dokumentInfoId: z.string(),
    saksnummer: z.optional(z.string()),
    tittel: z.string(),
    dokumentType: z.optional(
        z.enum([
            'PLEIEPENGER_SYKT_BARN_SOKNAD',
            'PLEIEPENGER_SYKT_BARN_ETTERSENDELSE',
            'ETTERLYST_INNTEKTSMELDING',
            'ETTERLYST_INNTEKTSMELDING_PURRING',
            'VEDTAK_INNVILGELSE',
            'VEDTAK_AVSLAG',
            'VEDTAK_FRITEKST',
            'VEDTAK_ENDRING',
            'VEDTAK_MANUELT',
            'VEDTAK_UENDRETUTFALL',
            'UKJENT',
        ]),
    ),
    filtype: z.string(),
    harTilgang: z.boolean(),
    url: z.string(),
    relevanteDatoer: z.array(zRelevantDatoDto),
});

export const zOrganisasjon = z.object({
    organisasjonsnummer: z.string(),
    navn: z.optional(z.string()),
});

export const zInnsendelserISakDto = z.object({
    søknadId: z.uuid(),
    mottattTidspunkt: z.iso.datetime(),
    innsendelsestype: z.enum(['SØKNAD', 'ETTERSENDELSE', 'ENDRINGSMELDING', 'UKJENT']),
    k9FormatInnsendelse: z.optional(zInnsending),
    dokumenter: z.array(zDokumentDto),
    arbeidsgivere: z.optional(z.array(zOrganisasjon)),
});

export const zBehandlingDto = z.object({
    status: z.enum(['OPPRETTET', 'UNDER_BEHANDLING', 'PÅ_VENT', 'AVSLUTTET']),
    opprettetTidspunkt: z.iso.datetime(),
    avsluttetTidspunkt: z.optional(z.iso.datetime()),
    innsendelser: z.array(zInnsendelserISakDto),
    aksjonspunkter: z.array(zAksjonspunktDto),
    utgåendeDokumenter: z.array(zDokumentDto),
});

export const zPleietrengendeDto = z.object({
    identitetsnummer: z.string(),
    fødselsdato: z.iso.date(),
    aktørId: z.string(),
    fornavn: z.optional(z.string()),
    mellomnavn: z.optional(z.string()),
    etternavn: z.optional(z.string()),
});

export const zUtledetStatus = z.object({
    status: z.enum(['OPPRETTET', 'UNDER_BEHANDLING', 'PÅ_VENT', 'AVSLUTTET']),
    aksjonspunkter: z.array(zAksjonspunktDto),
    saksbehandlingsFrist: z.optional(z.iso.date()),
});

export const zSakDto = z.object({
    saksnummer: z.string(),
    utledetStatus: zUtledetStatus,
    saksbehandlingsFrist: z.optional(z.iso.date()),
    fagsakYtelseType: z.enum([
        'DAG',
        'FRISINN',
        'SP',
        'PSB',
        'PPN',
        'OMP',
        'OMP_KS',
        'OMP_MA',
        'OMP_AO',
        'OLP',
        'AAP',
        'ES',
        'FP',
        'SVP',
        'EF',
        'UNG',
        'OBSOLETE',
        '-',
    ]),
    ytelseType: z.enum(['PSB', 'PPN', 'OMP_KS', 'OMP_MA', 'OMP_AO', 'OLP']),
    behandlinger: z.array(zBehandlingDto),
});

export const zPleietrengendeMedSak = z.object({
    pleietrengende: zPleietrengendeDto,
    sak: zSakDto,
});

export const zSaksbehandlingtidDto = z.object({
    saksbehandlingstidUker: z.coerce.bigint(),
});

export const zHentSøknaderData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentSøknaderResponse = z.array(zSøknadDto);

export const zLastNedArbeidsgivermeldingData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        søknadId: z.uuid(),
    }),
    query: z.object({
        organisasjonsnummer: z.string(),
    }),
});

/**
 * OK
 */
export const zLastNedArbeidsgivermeldingResponse = z.string();

export const zHentMineSakerData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentMineSakerResponse = zPleietrengendeMedSak;

export const zHentSaksbehandlingstidData = z.object({
    body: z.optional(z.never()),
    path: z.optional(z.never()),
    query: z.optional(z.never()),
});

/**
 * OK
 */
export const zHentSaksbehandlingstidResponse = zSaksbehandlingtidDto;

export const zHentDokumentData = z.object({
    body: z.optional(z.never()),
    path: z.object({
        journalpostId: z.string(),
        dokumentInfoId: z.string(),
        variantFormat: z.string(),
    }),
    query: z.object({
        dokumentTittel: z.string(),
    }),
});

/**
 * OK
 */
export const zHentDokumentResponse = z.string();
